{"meta":{"title":"YCX-Blog","subtitle":"YCX的个人博客","description":"YCX的个人博客，每日(不一定)更新","author":"YCX","url":"http://ycx81.github.io","root":"/"},"pages":[{"title":"","date":"2023-08-23T07:31:05.966Z","updated":"2023-08-23T07:31:05.966Z","comments":true,"path":"404/index.html","permalink":"http://ycx81.github.io/404/index.html","excerpt":"","text":"​—title: ‘404’date: 2022-07-24 16:24:02comments: false​—"},{"title":"","date":"2022-07-25T07:42:39.000Z","updated":"2023-08-23T08:23:24.207Z","comments":true,"path":"about/index.html","permalink":"http://ycx81.github.io/about/index.html","excerpt":"","text":"神秘的YCX不想在这留下任何有效地址😜"},{"title":"","date":"2022-07-24T13:57:54.000Z","updated":"2023-08-23T08:17:27.595Z","comments":true,"path":"categories/index.html","permalink":"http://ycx81.github.io/categories/index.html","excerpt":"","text":""},{"title":"sitemap","date":"2022-07-24T08:18:51.000Z","updated":"2023-08-23T07:31:12.980Z","comments":true,"path":"sitemap/index.html","permalink":"http://ycx81.github.io/sitemap/index.html","excerpt":"","text":""},{"title":"archives","date":"2022-07-24T08:18:22.000Z","updated":"2023-08-23T07:31:08.440Z","comments":true,"path":"archives/index.html","permalink":"http://ycx81.github.io/archives/index.html","excerpt":"","text":""},{"title":"","date":"2022-07-24T13:55:00.000Z","updated":"2023-08-23T08:16:49.305Z","comments":true,"path":"tags/index.html","permalink":"http://ycx81.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"2024新年快乐","slug":"2024新年快乐","date":"2024-01-01T08:46:53.000Z","updated":"2024-01-03T09:26:13.542Z","comments":true,"path":"2024/01/01/2024新年快乐/","link":"","permalink":"http://ycx81.github.io/2024/01/01/2024%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/","excerpt":"前言2023真是转瞬即逝啊！","text":"前言2023真是转瞬即逝啊！ 每次到总结的时候又不知道该说些什么，不顾我觉得过去的2023年还是挺充实的。对于保持记录这种事情上，我不知道为啥有种莫名的抗拒，是不是觉得说出来的话就不是心里话了，哈哈，正经人谁写日记呢。23年确实是不断思索和启发的一年，上半年处于半摆烂状态，每天都能躺着刷视频从早看到晚，对于今后的人生选择也懒得去思索。 后面也慢慢开始尝试各种新的生活方式，目前仍处于并将长期处于探索新生活的阶段。尤其是重拾了一些多年前的兴趣，比如重拾了毛笔字。。。 （混进去了兰亭序。。。） 用多邻国学了粤语，感觉实在没学到啥东西 重拾了吉他，还粗略地学习了一下音阶，没图就不放了。 2024打算再系统学习一下乐理知识和电钢琴，目前要说的流水账就这些。","categories":[],"tags":[]},{"title":"C++中string相加为什么有时中间会出现E","slug":"C-中string相加为什么有时中间会出现E","date":"2023-12-28T08:05:37.000Z","updated":"2023-12-28T08:06:37.230Z","comments":true,"path":"2023/12/28/C-中string相加为什么有时中间会出现E/","link":"","permalink":"http://ycx81.github.io/2023/12/28/C-%E4%B8%ADstring%E7%9B%B8%E5%8A%A0%E4%B8%BA%E4%BB%80%E4%B9%88%E6%9C%89%E6%97%B6%E4%B8%AD%E9%97%B4%E4%BC%9A%E5%87%BA%E7%8E%B0E/","excerpt":"前言","text":"前言 在C++中，使用 + 运算符进行字符串相加时，不会出现额外的字符如 “E”。如果字符串相加的结果中看到 “E”，可能是因为其中的一个字符串是以 null 字符 (&#39;\\0&#39;) 结尾的 C 风格字符串，而另一个是使用 C++ 的 std::string 表示的。 在 C 风格字符串中，字符串的结束是由 null 字符 (&#39;\\0&#39;) 来标志的。如果一个字符串的末尾没有 null 字符，C++ 在处理时可能会导致错误。 例如，考虑以下情况： 12345678910111213#include &lt;iostream&gt;#include &lt;string&gt;int main() &#123; const char* cString = &quot;Hello&quot;; std::string cppString = &quot;World&quot;; std::string result = cString + cppString; std::cout &lt;&lt; result &lt;&lt; std::endl; return 0;&#125; 在这个例子中，cString 是一个 C 风格字符串，而 cppString 是一个 std::string。由于 cString 是以 null 字符结尾的，当它与 cppString 相加时，+ 运算符会继续附加 cppString 的内容，但是在结果字符串中可能会有问题。 为了避免这种问题，可以确保 C++ 中的字符串都是使用 std::string 类型表示。如果需要将 C 风格字符串与 std::string 进行操作，可以使用 std::string 的构造函数来显式地创建 std::string 对象： 1std::string result = std::string(cString) + cppString;","categories":[],"tags":[]},{"title":"C++面试题总结（分类版）","slug":"C-面试题总结（分类版）","date":"2023-08-23T11:29:27.000Z","updated":"2023-08-23T11:41:30.935Z","comments":true,"path":"2023/08/23/C-面试题总结（分类版）/","link":"","permalink":"http://ycx81.github.io/2023/08/23/C-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E5%88%86%E7%B1%BB%E7%89%88%EF%BC%89/","excerpt":"前言C++面试题分知识点重新排了一下","text":"前言C++面试题分知识点重新排了一下 C&#x2F;C++ 基础 什么是C++？ 回答： C++是一种通用的、面向对象的编程语言，是C语言的扩展，它结合了高级语言的特性和低级语言的控制。C++支持面向对象编程、泛型编程和过程式编程，具有丰富的标准库。 什么是C++的优点和特点？ 回答： C++的优点包括： 面向对象编程：支持类、继承、多态等面向对象特性。 性能：C++允许底层内存控制，可实现高性能的代码。 标准库：拥有强大的标准库，提供各种数据结构和算法。 多范式：支持多种编程范式，如面向对象和泛型编程。 什么是C++的缺点？ 回答： C++的缺点包括： 复杂性：语法复杂，学习曲线陡峭。 内存管理：需要手动管理内存，容易导致内存泄漏和悬挂指针。 安全性：不如一些其他语言（如Java）那样严格的安全性。 移植性：不同编译器和平台之间的移植性有时较差。 C++和C的主要区别是什么？ 回答： C++在C的基础上引入了面向对象编程的特性，主要区别包括： 面向对象：C++支持类、继承、多态等面向对象特性，C不支持。 标准库：C++拥有更丰富的标准库，包括STL等。 引入了新的关键字和语法，如class、new、delete等。 兼容性：C++可以使用C的代码，但C不一定能使用C++的代码。 什么是C++标准库？ 回答： C++标准库是一组标准化的函数、对象和模板，提供了各种数据结构和算法，以便C++程序员更轻松地开发应用程序。它包括输入输出、容器、算法、文件操作等多个部分，如STL（Standard Template Library）。 C++中的const关键字有什么作用？ 回答： const关键字用于声明常量，它有以下作用： 声明常量变量，一旦赋值后不能修改。 声明常量指针，指针指向的内容不能通过指针修改。 声明常量成员函数，不允许修改对象的成员变量。 C++中的static关键字有什么作用？ 回答： static关键字在C++中的作用包括： 声明静态变量，这些变量在函数调用之间保持其值。 声明静态成员变量，这些成员变量属于类而不是对象。 声明静态成员函数，这些函数不属于特定对象，可通过类名直接访问。 C++中的指针和引用有什么区别？ 回答： 指针和引用的区别包括： 初始化和赋值： 指针需要初始化，并可以在后续重新赋值，而引用必须在声明时初始化，并不能重新绑定到其他对象。 符号和操作： 指针使用*和-&gt;来访问对象，而引用直接使用对象名。 空值： 指针可以为空（null），引用不能。 C++中的重载（Overloading）是什么？ 回答： 重载是C++中的特性，允许在同一作用域内定义多个同名函数，但它们具有不同的参数列表（参数类型或个数）。编译器根据函数调用时提供的参数来选择正确的函数版本。 什么是C++中的运算符重载？ 回答： 运算符重载是C++中的特性，允许对标准运算符（如+、-、*等）进行自定义定义，以便用于自定义数据类型的操作。运算符重载通过函数重载来实现，重载函数的名称是运算符本身。 内存管理和指针 什么是内存泄漏？如何避免内存泄漏？ 回答： 内存泄漏是指程序分配的内存在不再使用时未被释放，导致系统的可用内存逐渐减少。要避免内存泄漏，可以采取以下措施： 始终匹配new和delete、malloc和free。 使用智能指针来自动管理内存。 适时释放不再使用的资源，如文件句柄、数据库连接等。 使用内置数组或STL容器而不是手动分配内存。 什么是智能指针（Smart Pointer）？在C++中有哪些智能指针？ 回答： 智能指针是C++中的一种数据类型，用于管理动态分配的内存，以避免内存泄漏和悬挂指针等问题。C++标准库提供了以下几种智能指针： std::unique_ptr：表示独占所有权的智能指针。 std::shared_ptr：表示多个智能指针可以共享相同内存块的所有权。 std::weak_ptr：是一种弱引用智能指针，用于解决std::shared_ptr的循环引用问题。 什么是堆（Heap）和栈（Stack）？ 回答： 堆和栈是计算机内存中的两个主要区域： 栈（Stack）： 用于存储函数调用、局部变量等短期存储的数据。它的管理由编译器自动处理，通常具有较小的固定大小。 堆（Heap）： 用于存储动态分配的数据，如通过new、malloc等分配的内存。堆的管理需要显式释放，否则可能导致内存泄漏。 什么是指针和引用？它们之间有什么区别？ 回答： 指针和引用的区别包括： 初始化和赋值： 指针需要初始化，并可以在后续重新赋值，而引用必须在声明时初始化，并不能重新绑定到其他对象。 符号和操作： 指针使用*和-&gt;来访问对象，而引用直接使用对象名。 空值： 指针可以为空（null），引用不能。 什么是野指针（Dangling Pointer）？如何避免野指针问题？ 回答： 野指针是指指向已释放或未分配内存的指针，访问野指针会导致未定义的行为。为避免野指针问题，可以采取以下措施： 在释放内存后，将指针设置为null或空指针。 避免使用未初始化的指针。 使用智能指针来自动管理内存。 类和面向对象编程 什么是类和对象？ 回答： 类是一种抽象数据类型，定义了数据成员和成员函数，对象是类的实例。类描述了对象的属性和行为。 什么是封装（Encapsulation）？ 回答： 封装是面向对象编程的原则，它将数据和操作数据的方法封装在一个单元中，防止外部直接访问数据，提供了数据隐藏和抽象。 什么是继承（Inheritance）？C++支持多重继承吗？ 回答： 继承是面向对象编程的概念，允许一个类（派生类）从另一个类（基类）继承属性和行为。C++支持多重继承，即一个派生类可以从多个基类继承。 什么是多态性（Polymorphism）？C++中如何实现多态性？ 回答： 多态性是面向对象编程的概念，它允许不同对象对相同的消息做出不同的响应。在C++中，多态性通过虚函数和函数重载来实现。 什么是虚函数（Virtual Function）和纯虚函数（Pure Virtual Function）？ 回答： 虚函数是用关键字virtual声明的类成员函数，它允许在派生类中进行重写（覆盖）。纯虚函数是一个没有实现的虚函数，它的声明以= 0结尾，用于定义接口。 什么是构造函数和析构函数？它们的作用是什么？ 回答： 构造函数是用于对象初始化的特殊成员函数，它在对象创建时自动调用。析构函数用于对象销毁时执行必要的清理和资源释放操作。构造函数和析构函数的名称与类名相同，但析构函数前面加上波浪号（~）。 异常处理 什么是异常处理（Exception Handling）？在C++中如何进行异常处理？ 回答： 异常处理是一种程序设计和错误处理的方法，用于处理程序在运行时遇到的异常情况。异常是指不寻常的、不正常的情况，可能导致程序中断或不正常行为。在C++中，异常处理可以通过try、throw和catch关键字来实现。 什么是RAII（资源获取即初始化）？它在C++中有什么作用？ 回答： RAII（Resource Acquisition Is Initialization）是C++中的一种编程范式，它强调资源的获取和释放应与对象的生命周期绑定。RAII的核心思想是在对象的构造函数中获取资源，在析构函数中释放资源，这样可以确保资源在对象生命周期结束时被正确释放，避免资源泄漏。RAII用于管理各种资源，包括内存、文件句柄、数据库连接等。 文件和输入输出 如何在C++中读写文件？ 回答： 在C++中，可以使用&lt;fstream&gt;头文件中的ifstream和ofstream类来进行文件的读写操作。通常的步骤包括打开文件、读写数据、关闭文件。同时，C++还提供了&lt;iostream&gt;中的输入输出流对象，如cin和cout，用于标准输入输出。 什么是C++的流（Stream）？有哪些常用的流对象？ 回答： 流是C++中用于输入和输出的抽象概念，它将数据流转化为字符流，使得数据的输入和输出都可以通过流进行。常用的流对象包括： cin：标准输入流，用于从键盘读取输入。 cout：标准输出流，用于向屏幕输出。 ifstream：用于从文件读取输入。 ofstream：用于向文件写入输出。 stringstream：用于处理字符串的输入输出。 C++中的输入输出运算符是什么？如何重载它们？ 回答： C++中的输入输出运算符是&lt;&lt;和&gt;&gt;，它们通常用于cout和cin对象以及文件流对象的输入输出。您可以通过运算符重载来自定义类的输入输出行为，重载函数的名称是运算符本身，例如： 123456789101112class MyClass &#123;public: int data; friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const MyClass&amp; obj) &#123; os &lt;&lt; obj.data; // 自定义输出行为 return os; &#125; friend std::istream&amp; operator&gt;&gt;(std::istream&amp; is, MyClass&amp; obj) &#123; is &gt;&gt; obj.data; // 自定义输入行为 return is; &#125;&#125;; 模板和泛型编程 什么是模板（Template）？在C++中如何使用模板？ 回答： 模板是C++中的一种机制，允许编写通用的代码以适应不同的数据类型。模板以template关键字开始，可以定义函数模板和类模板。 什么是STL（Standard Template Library）？它包括哪些常见组件？ 回答： STL是C++标准库的一部分，提供了许多常用的数据结构和算法，包括容器（如向量、链表、映射）、迭代器、算法（如排序、查找、遍历）等。STL使C++程序员能够更轻松地处理数据和执行常见的操作。 编译和预处理器 什么是预处理器（Preprocessor）？它在C&#x2F;C++中有什么作用？ 回答： 预处理器是C&#x2F;C++编译过程的一部分，用于在实际编译之前对源代码进行处理。它的主要作用包括： 处理预处理指令，如#include、#define等。 进行宏替换。 条件编译，根据条件编译部分代码。 生成头文件的包含关系。预处理器的工作是在实际编译之前进行的，它可以影响源代码的文本，但不会涉及编译后的机器代码生成。 面试中常见问题 为什么C++中需要析构函数？ 回答： 析构函数是C++中的特殊成员函数，用于在对象生命周期结束时执行必要的清理和资源释放操作。它是必要的，因为C++允许手动管理资源，如内存、文件句柄等，析构函数确保这些资源在对象销毁时被正确释放，避免资源泄漏。 什么是函数重载（Function Overloading）？举例说明。 回答： 函数重载是指在同一作用域内定义多个同名函数，但它们具有不同的参数列表（参数类型或个数）。编译器根据函数调用时提供的参数来选择正确的函数版本。示例如下： 1234567891011121314151617void print(int x) &#123; std::cout &lt;&lt; &quot;Printing integer: &quot; &lt;&lt; x &lt;&lt; std::endl;&#125;void print(double y) &#123; std::cout &lt;&lt; &quot;Printing double: &quot; &lt;&lt; y &lt;&lt; std::endl;&#125;int main() &#123; int a = 42; double b = 3.14; print(a); // 编译时确定调用 print(int) print(b); // 编译时确定调用 print(double) return 0;&#125; C++中的多重继承是什么？它有什么特点和潜在的问题？ 回答： 多重继承是C++中的面向对象编程概念，允许一个类从多个基类继承属性和行为。多重继承的特点和潜在问题包括：特点： 一个派生类可以继承多个基类的成员，包括数据成员和成员函数。 可以实现不同类之间的复杂关系，例如混合多个不同类型的功能。潜在问题： 菱形继承问题（Diamond Inheritance Problem）： 当一个类通过多条路径继承同一个基类时，可能导致同一基类的多个实例被创建，引发二义性。 函数名冲突： 如果多个基类具有相同名称的成员函数，可能导致函数名冲突，需要使用作用域解析运算符来解决。 什么是静态多态性（Static Polymorphism）和动态多态性（Dynamic Polymorphism）？它们之间有什么区别？ 回答： 静态多态性（Static Polymorphism）： 静态多态性是在编译时确定函数调用的多态性，通常通过函数重载和运算符重载实现。编译器在编译时选择正确的函数版本。 动态多态性（Dynamic Polymorphism）： 动态多态性是在运行时确定函数调用的多态性，通常通过虚函数实现。运行时根据对象的实际类型来调用适当的函数版本。这通常涉及基类指针或引用指向派生类对象。 什么是C++中的引用（Reference）？ 回答： 引用是C++中的一种数据类型，用于创建变量的别名。它允许在不使用指针的情况下对变量进行操作，并且必须在声明时进行初始化。引用通常用于函数参数传递和返回值，以避免复制大型对象。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://ycx81.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"C/C++","slug":"C-C","permalink":"http://ycx81.github.io/tags/C-C/"},{"name":"知识手册","slug":"知识手册","permalink":"http://ycx81.github.io/tags/%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"}]},{"title":"Redis简易手册","slug":"Redis简易手册","date":"2023-08-23T06:46:13.000Z","updated":"2023-08-23T11:10:37.337Z","comments":true,"path":"2023/08/23/Redis简易手册/","link":"","permalink":"http://ycx81.github.io/2023/08/23/Redis%E7%AE%80%E6%98%93%E6%89%8B%E5%86%8C/","excerpt":"0x00 前言 近期在B站看到一个1小时教学Redis，全程没有废话，粗略过了一遍，并对其主要知识点进行总结。 【【GeekHour】一小时Redis教程-哔哩哔哩】 https://b23.tv/MzEWwWh","text":"0x00 前言 近期在B站看到一个1小时教学Redis，全程没有废话，粗略过了一遍，并对其主要知识点进行总结。 【【GeekHour】一小时Redis教程-哔哩哔哩】 https://b23.tv/MzEWwWh 以下是一些常用的Redis命令，使用Markdown语法进行总结： 连接与配置 连接到Redis服务器：redis-cli 显示Redis服务器信息：INFO 查看配置文件的路径：CONFIG GET dir 修改配置项：CONFIG SET &lt;config-name&gt; &lt;value&gt; 查看Redis版本：redis-server -v 键操作 设置键值对：SET &lt;key&gt; &lt;value&gt; 获取键对应的值：GET &lt;key&gt; 删除键值对：DEL &lt;key&gt; 检查键是否存在：EXISTS &lt;key&gt; 设置键的过期时间（秒）：EXPIRE &lt;key&gt; &lt;seconds&gt; 移除键的过期时间：PERSIST &lt;key&gt; 查看键的剩余过期时间（秒）：TTL &lt;key&gt; 列表操作 向列表头部添加元素：LPUSH &lt;key&gt; &lt;value&gt; 向列表尾部添加元素：RPUSH &lt;key&gt; &lt;value&gt; 获取列表长度：LLEN &lt;key&gt; 获取列表指定范围的元素：LRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt; 弹出并返回列表头部元素：LPOP &lt;key&gt; 弹出并返回列表尾部元素：RPOP &lt;key&gt; 集合操作 向集合添加一个元素：SADD &lt;key&gt; &lt;member&gt; 获取集合的所有成员：SMEMBERS &lt;key&gt; 检查元素是否是集合的成员：SISMEMBER &lt;key&gt; &lt;member&gt; 移除集合中的一个元素：SREM &lt;key&gt; &lt;member&gt; 计算集合的交集、并集或差集：SINTER, SUNION, SDIFF 哈希操作 设置哈希字段值：HSET &lt;key&gt; &lt;field&gt; &lt;value&gt; 获取哈希字段值：HGET &lt;key&gt; &lt;field&gt; 获取哈希所有字段和值：HGETALL &lt;key&gt; 删除哈希字段：HDEL &lt;key&gt; &lt;field&gt; 查看哈希字段数量：HLEN &lt;key&gt; 有序集合操作 向有序集合添加成员及分数：ZADD &lt;key&gt; &lt;score&gt; &lt;member&gt; 获取有序集合的成员列表：ZRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt; 根据分数范围获取有序集合的成员：ZRANGEBYSCORE &lt;key&gt; &lt;min&gt; &lt;max&gt; 获取有序集合的成员数量：ZCARD &lt;key&gt; 移除有序集合中的成员：ZREM &lt;key&gt; &lt;member&gt; 发布与订阅 订阅频道：SUBSCRIBE &lt;channel&gt; 取消订阅频道：UNSUBSCRIBE &lt;channel&gt; 发布消息到频道：PUBLISH &lt;channel&gt; &lt;message&gt; 排序和排名 按分数升序排列有序集合的成员：ZREVRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt; 获取有序集合中成员的排名：ZRANK &lt;key&gt; &lt;member&gt; 获取有序集合中成员的分数：ZSCORE &lt;key&gt; &lt;member&gt; 模式匹配 使用通配符查找键名：KEYS &lt;pattern&gt; 批量删除符合条件的键：DEL &lt;pattern&gt; 列出匹配的键名：SCAN &lt;cursor&gt; MATCH &lt;pattern&gt; COUNT &lt;count&gt; 事务 开启事务：MULTI 执行事务：EXEC 取消事务：DISCARD 管道 使用管道执行多个命令：可以通过一次网络往返执行多个命令以提高性能，使用PIPELINE 信息统计 查看内存使用情况：MEMORY STATS 查看服务器状态：INFO SERVER 查看客户端列表：CLIENT LIST 备份和恢复 创建数据快照：SAVE 在后台创建数据快照：BGSAVE 恢复数据：将快照文件复制到Redis数据目录并重启服务器 安全 设置访问密码：CONFIG SET requirepass &lt;password&gt; 验证密码：AUTH &lt;password&gt; 集群 创建Redis集群：使用Redis Cluster 查看集群节点信息：CLUSTER NODES 手动切换主节点：CLUSTER FAILOVER 其他 发送一个即时命令到服务器以查看性能统计信息：INFO COMMANDSTATS 监视键的变化：MONITOR 配置Redis服务器以接受远程连接：修改redis.conf文件中的bind选项 在C++中使用Redis在C++中使用Redis通常需要使用Redis C++客户端库，其中最常用的是hiredis和cpp_redis。以下是在C++中使用Redis的基本步骤以及一些常见操作： 步骤1：安装Redis C++客户端库 首先安装Redis C++客户端库，最常见的选择是hiredis和cpp_redis。您可以使用包管理器（如apt、brew、vcpkg）来安装这些库，或者从官方GitHub存储库手动构建它们。 步骤2：包含头文件 在您的C++代码中，包含适当的Redis客户端库头文件。例如使用cpp_redis则需要包含以下头文件： 1#include &lt;cpp_redis/cpp_redis&gt; 步骤3：建立与Redis的连接 在代码中，使用客户端库提供的函数来建立与Redis服务器的连接。这通常涉及创建一个客户端对象并配置连接参数： 1234cpp_redis::client client;// 设置连接参数client.connect(&quot;localhost&quot;, 6379); 步骤4：执行Redis命令 使用客户端库提供的函数执行Redis命令。以下是一些常见的示例： 123456789// 设置键值对client.set(&quot;my_key&quot;, &quot;my_value&quot;);// 获取键的值client.get(&quot;my_key&quot;);// 执行哈希操作client.hset(&quot;my_hash&quot;, &quot;field1&quot;, &quot;value1&quot;);client.hget(&quot;my_hash&quot;, &quot;field1&quot;); 步骤5：提交命令和处理响应 提交Redis命令并处理响应。可以使用回调函数或阻塞方式等不同的方法来处理响应： 123456789101112131415// 提交命令client.sync_commit();// 处理响应（回调方式）client.get(&quot;my_key&quot;, [](cpp_redis::reply&amp; reply) &#123; if (reply.is_string()) &#123; std::cout &lt;&lt; &quot;Value: &quot; &lt;&lt; reply.as_string() &lt;&lt; std::endl; &#125;&#125;);// 处理响应（阻塞方式）cpp_redis::reply reply = client.sync_commit();if (reply.is_string()) &#123; std::cout &lt;&lt; &quot;Value: &quot; &lt;&lt; reply.as_string() &lt;&lt; std::endl;&#125; 步骤6：关闭连接 在使用完Redis之后，确保关闭与Redis服务器的连接以释放资源： 1client.disconnect(); 要了解更多详细信息和示例，请查阅Redis C++客户端库的文档。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://ycx81.github.io/tags/redis/"},{"name":"知识手册","slug":"知识手册","permalink":"http://ycx81.github.io/tags/%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"}]},{"title":"线程与协程异同比较","slug":"线程与协程异同比较","date":"2023-08-19T14:44:59.000Z","updated":"2023-09-05T08:06:30.442Z","comments":true,"path":"2023/08/19/线程与协程异同比较/","link":"","permalink":"http://ycx81.github.io/2023/08/19/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%8D%8F%E7%A8%8B%E5%BC%82%E5%90%8C%E6%AF%94%E8%BE%83/","excerpt":"前言线程和协程都是用于多任务并发编程的概念，但它们有很大的不同之处。在本文中，我们将深入讨论线程和协程的异同点，并提供一些示例代码来说明它们的用法。","text":"前言线程和协程都是用于多任务并发编程的概念，但它们有很大的不同之处。在本文中，我们将深入讨论线程和协程的异同点，并提供一些示例代码来说明它们的用法。 线程（Threads）线程是操作系统级别的并发执行单位，它是多任务编程的一种方式。每个线程都有自己的堆栈和程序计数器，可以独立运行。线程之间可以并行执行，共享进程的内存空间，因此可以访问相同的全局变量和数据结构。 线程的特点 并行执行：线程可以并行执行，利用多核处理器的优势，提高程序性能。 共享内存：线程可以访问相同进程的内存空间，因此可以轻松共享数据。 适用于长时间任务：线程适用于执行长时间运行的任务，例如网络通信、文件读写等。 线程的示例代码123456789101112#include &lt;iostream&gt;#include &lt;thread&gt;void hello() &#123; std::cout &lt;&lt; &quot;Hello from thread!&quot; &lt;&lt; std::endl;&#125;int main() &#123; std::thread t(hello); t.join(); return 0;&#125; 协程（Coroutines）协程是一种更轻量级的并发编程概念，它允许函数在执行过程中暂停并在稍后恢复执行，而不需要创建新的线程。协程通常在函数级别上实现，而不是线程级别。 协程的特点 轻量级：协程比线程更轻量级，创建和销毁协程的开销较小。 避免并发问题：协程通常不会涉及共享内存，因此避免了许多并发问题，如竞态条件和死锁。 适用于 I&#x2F;O 密集型任务：协程适用于执行 I&#x2F;O 密集型任务，如网络请求、文件操作等。 协程的示例代码123456789101112131415161718192021222324252627#include &lt;iostream&gt;#include &lt;coroutine&gt;struct Task &#123; struct promise_type &#123; auto get_return_object() &#123; return Task&#123;&#125;; &#125; auto initial_suspend() &#123; return std::suspend_always&#123;&#125;; &#125; auto final_suspend() noexcept &#123; return std::suspend_always&#123;&#125;; &#125; void return_void() &#123;&#125; void unhandled_exception() &#123;&#125; &#125;; void await_suspend(std::coroutine_handle&lt;&gt; h) &#123; std::cout &lt;&lt; &quot;Task is suspended&quot; &lt;&lt; std::endl; h.resume(); &#125;&#125;;Task myCoroutine() &#123; co_await std::suspend_always&#123;&#125;; std::cout &lt;&lt; &quot;Coroutine resumed&quot; &lt;&lt; std::endl;&#125;int main() &#123; myCoroutine(); return 0;&#125; 异同点比较1. 并发级别 线程：线程是操作系统级别的并发执行单位，可以并行执行在多核处理器上。 协程：协程是函数级别的并发单位，通常在单个线程内执行，不能并行执行。 2. 内存和开销 线程：线程的创建和销毁开销较大，因为每个线程都有自己的堆栈和上下文。线程通常需要更多的内存。 协程：协程轻量级，创建和销毁开销小。协程通常需要较少的内存。 3. 共享状态 线程：线程之间可以轻松共享内存，但需要考虑同步和竞态条件。 协程：协程通常不涉及共享内存，因此避免了大部分并发问题。 4. 适用场景 线程：适用于长时间运行的任务，利用多核处理器的并行性。 协程：适用于 I&#x2F;O 密集型任务，避免了线程的开销和并发问题。 综上所述，线程和协程在多任务编程中有不同的优势和用途。线程适用于需要并行执行的长时间任务，而协程适用于避免共享内存和处理 I&#x2F;O 密集型任务。在实际应用中，可以根据具体的需求选择合适的并发模型。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://ycx81.github.io/tags/C/"}]},{"title":"内联函数和函数调用之间的主要区别","slug":"内联函数和函数调用之间的主要区别","date":"2023-08-14T16:08:56.000Z","updated":"2023-09-05T08:04:11.691Z","comments":true,"path":"2023/08/15/内联函数和函数调用之间的主要区别/","link":"","permalink":"http://ycx81.github.io/2023/08/15/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E5%92%8C%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/","excerpt":"前言内联函数和普通函数调用之间有一些关键区别，它们影响了编译器如何处理函数以及程序的性能。下面是内联函数和函数调用之间的主要区别：","text":"前言内联函数和普通函数调用之间有一些关键区别，它们影响了编译器如何处理函数以及程序的性能。下面是内联函数和函数调用之间的主要区别： 1.编译时机制： 内联函数：内联函数是在编译时展开的，编译器会将函数体的代码复制到每个调用点，并消除函数调用的开销。 函数调用：普通函数调用是在运行时进行的，程序在运行时跳转到函数的地址执行代码。 2. 调用开销： 内联函数：由于内联函数是在调用点展开的，所以没有函数调用的开销，没有函数栈帧的创建和销毁，通常比函数调用更高效。 函数调用：函数调用涉及跳转到函数的地址、保存上下文、分配函数栈帧、传递参数等开销，相对较慢。 3. 代码膨胀： 内联函数：内联函数的代码会在每个调用点都复制一份，可能导致代码膨胀，增加可执行文件的大小。 函数调用：函数调用不会导致代码膨胀，函数的代码只有一份。 4. 适用场景： 内联函数：适用于短小、频繁调用的函数，如简单的getter和setter函数、数学运算等。 函数调用：适用于复杂的函数或递归函数。 5. 代码可读性： 内联函数：内联函数通常将函数体的代码嵌入到调用点，可能会导致可读性较差的代码。 函数调用：函数调用可以提高代码的可读性，因为它将具体的实现分离出来。 6. 语法： 内联函数：使用 inline 关键字进行声明和定义。 函数调用：直接调用函数名。 下面是一个示例，演示了内联函数和函数调用之间的区别： 1234567891011121314151617// 内联函数inline int add(int a, int b) &#123; return a + b;&#125;// 函数调用int subtract(int a, int b) &#123; return a - b;&#125;int main() &#123; int x = 5, y = 3; int result1 = add(x, y); // 内联函数展开为 x + y int result2 = subtract(x, y); // 函数调用 subtract(x, y) return 0;&#125; 总之，内联函数和函数调用之间的选择取决于代码的需求和性能优化。内联函数可以提高性能，但可能导致代码膨胀，而函数调用具有更好的代码结构和可读性。在实际编程中，需要根据具体情况权衡二者的利弊。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://ycx81.github.io/tags/C/"}]},{"title":"简易网盘项目00","slug":"简易网盘项目00","date":"2023-07-27T05:08:00.000Z","updated":"2023-08-23T07:59:33.953Z","comments":true,"path":"2023/07/27/简易网盘项目00/","link":"","permalink":"http://ycx81.github.io/2023/07/27/%E7%AE%80%E6%98%93%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE00/","excerpt":"0x00 前言 此项目准备用于应付近期的面试，作为一种简易的Web Server项目，可能需要4-5期迭代开发。本项目将尽可能还原市面上主流的网盘所具有的功能。","text":"0x00 前言 此项目准备用于应付近期的面试，作为一种简易的Web Server项目，可能需要4-5期迭代开发。本项目将尽可能还原市面上主流的网盘所具有的功能。 0x01 第一期开发总纲第一期主要需要实现的功能有服务器端实现命令解析，可能涉及的命令包括： cd 进入服务器对应目录 ls 列出当前路径下的所有文件 pwd 显示当前所处路径 puts filename 上传本地文件到服务器 get filename 下载服务器文件到本地 rm filename 删除服务器上的某文件 mkdir dirname 创建文件夹 非法命令 不响应 0x020x030x04","categories":[],"tags":[]},{"title":"2023.07.26随笔","slug":"2023-07-26随笔","date":"2023-07-26T12:32:22.000Z","updated":"2023-07-26T12:38:40.450Z","comments":true,"path":"2023/07/26/2023-07-26随笔/","link":"","permalink":"http://ycx81.github.io/2023/07/26/2023-07-26%E9%9A%8F%E7%AC%94/","excerpt":"0x00 前言 每天感觉浑身无力，做事没有干劲，犹如一具行尸走肉，这个榴莲披萨薄脆还挺好吃。","text":"0x00 前言 每天感觉浑身无力，做事没有干劲，犹如一具行尸走肉，这个榴莲披萨薄脆还挺好吃。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://ycx81.github.io/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"日记","permalink":"http://ycx81.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"吃","slug":"吃","permalink":"http://ycx81.github.io/tags/%E5%90%83/"}]},{"title":"2023.07.25随笔","slug":"2023-07-25随笔","date":"2023-07-25T11:06:46.000Z","updated":"2023-07-25T12:00:52.195Z","comments":true,"path":"2023/07/25/2023-07-25随笔/","link":"","permalink":"http://ycx81.github.io/2023/07/25/2023-07-25%E9%9A%8F%E7%AC%94/","excerpt":"0x00 前言 今天总算是把博客搭建好了，其中遇到一堆奇怪的问题和各种各样的bug。。。(图为7.21大雨前的三公山)","text":"0x00 前言 今天总算是把博客搭建好了，其中遇到一堆奇怪的问题和各种各样的bug。。。(图为7.21大雨前的三公山) 最近面试的项目还不知道从何下手，每次准备去做的时候又想开摆，真是折磨啊，我发现我到现在写日记还是在纯记流水账哈哈哈哈哈哈","categories":[{"name":"随笔","slug":"随笔","permalink":"http://ycx81.github.io/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"日记","permalink":"http://ycx81.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://ycx81.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"C++面试题总结","slug":"C-面试题总结（乱序版）","date":"2023-05-08T15:07:14.000Z","updated":"2023-08-23T12:02:33.905Z","comments":true,"path":"2023/05/08/C-面试题总结（乱序版）/","link":"","permalink":"http://ycx81.github.io/2023/05/08/C-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93%EF%BC%88%E4%B9%B1%E5%BA%8F%E7%89%88%EF%BC%89/","excerpt":"前言平时积累的面试题，还没归纳整理，先弄个乱序版，后面有时间再重新按知识点排序一下","text":"前言平时积累的面试题，还没归纳整理，先弄个乱序版，后面有时间再重新按知识点排序一下 什么是C语言？它有哪些主要特点？回答： C语言是一种通用的、过程化的编程语言。它的主要特点包括： 简洁性： C语言的语法相对简单，易于学习和理解。 可移植性： C代码可以在不同的计算机平台上编译和运行，只需进行少量修改。 高性能： C语言代码通常具有很高的执行速度，因为它接近底层硬件。 强大的标准库： C标准库提供了许多常用的函数，用于文件操作、内存管理、输入&#x2F;输出等。 指针支持： C语言支持指针，允许直接访问内存地址，因此具有更高的灵活性。 什么是C++语言？它与C语言有什么不同？回答： C++是一种多范式编程语言，它是C语言的扩展，包括了面向对象编程（OOP）的特性。与C语言相比，C++的主要不同之处包括： 面向对象编程： C++支持类和对象，允许使用封装、继承和多态等OOP特性。 标准模板库（STL）： C++提供了STL，包括容器、算法和迭代器等，使代码更易于编写和维护。 异常处理： C++支持异常处理，可以捕获和处理运行时错误。 函数重载： C++允许定义多个同名函数，但参数类型或数量不同，称为函数重载。 命名空间： C++引入了命名空间概念，用于组织和管理代码。 什么是指针？如何使用指针？回答： 指针是一种用于存储变量地址的数据类型。指针通常用于以下操作： 声明指针： 使用*运算符声明指针变量，例如：int *ptr;声明一个指向整数的指针。 初始化指针： 将指针指向特定变量的地址，例如：ptr = &amp;myVar;将指针ptr指向myVar的地址。 访问变量： 使用指针间接访问变量的值，例如：int x = *ptr;将指针ptr指向的值赋给x。 指针算术： 指针支持算术运算，例如：ptr++将指针向后移动一个位置。 空指针： 使用nullptr（C++11及以上）或NULL（旧标准）表示空指针，即不指向任何变量的指针。 指针是C&#x2F;C++中强大但需要谨慎使用的特性，因为它们可以直接操作内存。 什么是动态内存分配？如何在C&#x2F;C++中执行动态内存分配和释放？回答： 动态内存分配是在程序运行时分配内存，以存储数据结构，而不是在编译时分配。在C&#x2F;C++中，可以使用以下函数执行动态内存分配和释放： C中的动态内存分配： malloc(size_t size)：分配指定大小的内存块，并返回指向首字节的指针。 calloc(size_t num, size_t size)：分配指定数量和大小的内存块，初始化为零。 realloc(void* ptr, size_t new_size)：重新分配已分配内存的大小。 free(void* ptr)：释放先前分配的内存。 C++中的动态内存分配： new type：分配指定类型的内存，返回指向该类型的指针。 new type[n]：分配数组类型的内存。 delete ptr：释放由new分配的内存。 delete[] ptr：释放由new[]分配的内存。 必须谨慎使用动态内存分配，以避免内存泄漏和悬挂指针。 什么是类和对象？如何在C++中定义类和创建对象？回答： 类是C++中面向对象编程的基本概念，它是一种用户自定义的数据类型，用于封装数据和操作。对象是类的实例，它是具体的数据结构，可以执行类中定义的操作。 在C++中定义类和创建对象的步骤如下： 定义类：使用class关键字定义类，声明类的数据成员和成员函数。例如： 12345class MyClass &#123;public: int myVar; void myFunction();&#125;; 创建对象：在程序中使用类名创建对象，例如： 1MyClass obj; 访问对象成员：使用点运算符(.)访问对象的数据成员和成员函数，例如： 12obj.myVar = 42;obj.myFunction(); 类和对象允许将相关数据和操作封装在一起，提高了代码的可维护性和可重用性。 什么是构造函数和析构函数？它们有什么作用？回答： 构造函数和析构函数是C++类的特殊成员函数，用于对象的初始化和清理。 构造函数（Constructor）： 构造函数在对象创建时自动调用，用于初始化对象的数据成员。构造函数的名称与类名相同，没有返回类型。 123456class MyClass &#123;public: MyClass() &#123; // 构造函数的代码 &#125;&#125;; 析构函数（Destructor）： 析构函数在对象销毁时自动调用，用于清理资源。析构函数的名称与类名相同，前面加上~。 123456class MyClass &#123;public: ~MyClass() &#123; // 析构函数的代码 &#125;&#125;; 构造函数确保对象在使用前处于一种有效状态，而析构函数可用于释放对象使用的资源，如内存或打开的文件。 什么是继承？如何在C++中实现继承？回答： 继承是面向对象编程中的一个重要概念，它允许创建一个新类（子类或派生类），以重用现有类（基类或父类）的属性和方法。在C++中，可以使用以下方式实现继承： 123456789101112131415class ParentClass &#123;public: int parentVar; void parentFunction() &#123; // 父类的方法 &#125;&#125;;class ChildClass : public ParentClass &#123;public: int childVar; void childFunction() &#123; // 子类的方法 &#125;&#125;; ChildClass继承了ParentClass，子类拥有父类的数据成员和方法。 public关键字表示继承的访问权限，public表示子类可以访问父类的公有成员。 继承允许代码重用、扩展现有类的功能，以及创建层次化的类结构。 什么是多态性（Polymorphism）？如何在C++中实现多态性？回答： 多态性是面向对象编程的一个特性，它允许不同对象对相同的方法产生不同的行为。在C++中，多态性可以通过函数重载和虚函数实现。 函数重载： 函数重载允许在同一个类中定义多个同名函数，但参数类型或数量不同。编译器根据调用时的参数类型来选择正确的函数。 123456789class MyMath &#123;public: int add(int a, int b) &#123; return a + b; &#125; double add(double a, double b) &#123; return a + b; &#125;&#125;; 虚函数和运行时多态性： 虚函数是基类中声明为virtual的成员函数。子类可以重写（覆盖）基类的虚函数，并在运行时调用相应的子类版本。 12345678910111213class Shape &#123;public: virtual void draw() &#123; // 基类的虚函数 &#125;&#125;;class Circle : public Shape &#123;public: void draw() override &#123; // 子类的虚函数 &#125;&#125;; 多态性允许以通用的方式操作对象，而不必关心其具体类型。这提高了代码的灵活性和可扩展性。 什么是模板（Template）？如何在C++中使用模板？回答： 模板是C++中一种通用编程工具，允许编写通用代码，适用于不同的数据类型。C++中有两种主要类型的模板： 函数模板： 允许编写通用函数，可以适用于不同类型的参数。 1234template &lt;typename T&gt;T add(T a, T b) &#123; return a + b;&#125; 类模板： 允许编写通用类，可以适用于不同类型的成员。 123456template &lt;typename T&gt;class MyContainer &#123;public: T value; MyContainer(T val) : value(val) &#123;&#125;&#125;; 模板通过参数化类型来实现通用性，使得代码更具通用性和可重用性。 什么是RAII（资源获取即初始化）？它在C++中有什么作用？回答： RAII是一种C++编程惯例，它强调资源管理与对象生命周期的绑定。RAII的核心思想是，资源的获取应该在对象构造期间进行，而释放应该在对象析构期间进行。这可以确保资源在任何情况下都会得到正确释放，以避免资源泄漏。 RAII最常见的用法之一是使用析构函数来释放动态分配的内存。例如： 123456789class MyResource &#123;public: MyResource() &#123; // 获取资源的操作 &#125; ~MyResource() &#123; // 释放资源的操作 &#125;&#125;; 使用RAII，可以确保在对象离开作用域时资源被正确释放，即使发生异常或提前退出函数也可以。这种技术还可用于管理文件句柄、互斥锁等资源。 什么是指针和引用的区别？在什么情况下应该使用哪个？回答： 指针和引用都用于处理变量的间接访问，但它们有一些重要的区别： 指针（Pointer）： 指针是一个变量，其值是另一个变量的地址。 指针可以重新分配给不同的变量，因此它是可变的。 指针需要显式解引用才能访问存储在地址中的值。 指针可以为空（null）。 指针通常用于动态内存分配、数据结构和在函数中传递参数时。 引用（Reference）： 引用是一个别名，它引用了另一个变量。 引用在创建后不能重新绑定到其他变量，因此它是不可变的。 引用不需要显式解引用，因为它本身就是所引用变量的别名。 引用不能为空，它必须引用一个已存在的变量。 引用通常用于函数参数、返回值和避免复制大对象的开销。 在选择使用指针还是引用时，应考虑以下因素： 如果需要能够重新分配引用或者引用为空，应使用指针。 如果不需要重新分配引用，并且要避免复制大对象的开销，应使用引用。 对于函数参数，如果不需要修改传递的值，通常使用引用或者常量引用（const引用）更安全，因为它们不会改变原始值。 什么是头文件（Header File）？为什么在C&#x2F;C++中使用头文件？回答： 头文件是包含C&#x2F;C++程序中声明和定义的信息的文件，通常具有.h（C）或.hpp（C++）的扩展名。头文件的主要作用是： 分离接口和实现： 头文件包含函数和类的声明，但通常不包含实际的函数或类的实现。这有助于分离接口定义（头文件）和实现（源文件），以便于代码组织和维护。 重复使用代码： 头文件允许在多个源文件中共享相同的函数和类声明，以便重复使用代码。 编译优化： 使用头文件可以提供编译器优化的机会，因为它可以在编译不同源文件之前查看头文件的内容。 编译检查： 头文件中的声明允许编译器进行类型检查，以捕获潜在的错误。 通常，头文件包含函数原型、类声明、宏定义、常量和全局变量的声明。源文件（.c或.cpp）包含函数和类的实现。 什么是内联函数（Inline Function）？如何定义内联函数？回答： 内联函数是C&#x2F;C++中的一种编译器指示，用于请求将函数的代码嵌入到函数调用的地方，而不是通过函数调用的方式执行它。内联函数通常用于小型函数，以提高执行效率，因为函数调用会涉及额外的开销。 在C++中，可以通过在函数声明前加上inline关键字来定义内联函数，例如： 123inline int add(int a, int b) &#123; return a + b;&#125; 内联函数的优点包括： 减少了函数调用的开销，因为代码直接嵌入到调用处。 可以提高程序的性能，特别是对于频繁调用的小型函数。 有助于减小可执行文件的大小。 然而，内联函数的使用应谨慎，因为过多的内联函数可能会导致可执行文件变得庞大。编译器通常会根据函数的大小和复杂性来决定是否将其内联。 什么是多线程？如何在C&#x2F;C++中创建和管理多线程？回答： 多线程是一种并发编程技术，允许程序同时执行多个线程，每个线程都有自己的执行流和局部状态。多线程可以提高程序的性能和响应性，特别是在多核处理器上。 在C&#x2F;C++中，可以使用以下库来创建和管理多线程： C语言中的线程（pthread）： 使用POSIX线程库可以在C中创建多线程。示例： 12345678910111213#include &lt;pthread.h&gt;void* thread_function(void* arg) &#123; // 线程函数的代码 return NULL;&#125;int main() &#123; pthread_t thread; pthread_create(&amp;thread, NULL, thread_function, NULL); pthread_join(thread, NULL); // 等待线程结束 return 0;&#125; C++标准库中的线程： C++11引入了std::thread，允许在C++中创建多线程。示例： 1234567891011#include &lt;thread&gt;void thread_function() &#123; // 线程函数的代码&#125;int main() &#123; std::thread thread1(thread_function); thread1.join(); // 等待线程结束 return 0;&#125; 多线程编程需要谨慎处理共享资源的同步和互斥问题，以避免竞态条件和死锁等问题。 什么是异常处理？在C++中如何处理异常？回答： 异常处理 是一种在程序运行时检测和响应错误的机制，以避免程序崩溃或产生不可预测的行为。在C++中，异常处理使用try、catch和throw关键字来实现。 try块用于包装可能抛出异常的代码块。 catch块用于捕获和处理异常。可以有多个catch块，每个块可以处理不同类型的异常。 throw语句用于抛出异常，可以抛出任何类型的异常。 示例： 12345678910111213141516171819#include &lt;iostream&gt;#include &lt;stdexcept&gt;int divide(int a, int b) &#123; if (b == 0) &#123; throw std::runtime_error(&quot;Divide by zero&quot;); &#125; return a / b;&#125;int main() &#123; try &#123; int result = divide(10, 0); std::cout &lt;&lt; &quot;Result: &quot; &lt;&lt; result &lt;&lt; std::endl; &#125; catch (const std::exception&amp; e) &#123; std::cerr &lt;&lt; &quot;Exception: &quot; &lt;&lt; e.what() &lt;&lt; std::endl; &#125; return 0;&#125; 异常处理允许程序在遇到错误时进行安全退出或执行恢复操作。在设计函数时，应该考虑可能抛出的异常类型，并提供适当的异常处理机制。 什么是析构函数（Destructor）？为什么它重要？回答： 析构函数是C++类的特殊成员函数，用于对象的清理和资源释放。析构函数的名称与类名相同，前面加上~符号。 析构函数在以下情况下重要： 资源释放： 析构函数用于释放对象在其生命周期中分配的资源，如内存、文件句柄、数据库连接等。这有助于避免资源泄漏。 对象生命周期控制： 析构函数确定了对象在销毁时应采取的行动，例如关闭文件或释放锁定。 异常处理： 析构函数可以用于处理对象生命周期中的异常情况，确保资源在异常时得到释放。 子类析构函数： 在继承中，基类的析构函数通常是虚的，以确保在销毁子类对象时正确调用基类析构函数，从而实现多态的析构。 示例： 123456789class MyClass &#123;public: MyClass() &#123; // 构造函数的代码 &#125; ~MyClass() &#123; // 析构函数的代码，用于释放资源 &#125;&#125;; 确保在需要时正确实现析构函数，以避免资源泄漏和不稳定的程序行为。 什么是预处理器（Preprocessor）？它在C&#x2F;C++中有什么作用？回答： 预处理器是C&#x2F;C++编译过程中的一个独立阶段，用于在实际编译之前处理源代码。预处理器的主要作用包括： 宏替换： 预处理器可以替换源代码中的宏定义，例如使用#define定义的宏常量或宏函数。 文件包含： 预处理器使用#include指令将其他文件的内容插入源文件中，允许代码的模块化组织。 条件编译： 预处理器使用条件编译指令，如#ifdef和#ifndef，可以根据条件选择性地包含或排除代码块。 注释删除： 预处理器删除源代码中的注释，以减小编译后的可执行文件的大小。 其他： 预处理器还支持其他功能，如条件编译、宏展开等。 示例： 1234567891011#define MAX_VALUE 100 // 宏定义#include &lt;iostream&gt; // 文件包含#ifdef DEBUG // 调试代码#endifint main() &#123; int value = MAX_VALUE; // 宏替换 return 0;&#125; 预处理器通过生成经过处理的源代码，然后将其传递给编译器进行编译，起到了代码预处理和条件编译的作用。 什么是静态链接（Static Linking）和动态链接（Dynamic Linking）？它们有什么区别？回答： 静态链接和动态链接是用于将程序模块（如库和函数）与应用程序代码组合在一起的两种不同方法。 静态链接： 在静态链接中，编译器将所有需要的库和函数的代码复制到最终的可执行文件中。 可执行文件独立于外部库，无需依赖外部库的存在。 可执行文件较大，因为它包含了所有必要的代码。 静态链接的程序在运行时不需要外部库文件，因此更易于分发和部署。 动态链接： 在动态链接中，应用程序在运行时加载所需的库和函数。 可执行文件较小，因为它只包含链接到库的引用。 库文件（如DLL或共享对象）必须在运行时存在，否则程序将无法执行。 动态链接减小了可执行文件的大小，并允许库的更新和共享。 区别： 可执行文件大小： 静态链接生成较大的可执行文件，而动态链接生成较小的可执行文件。 部署和更新： 静态链接程序更容易部署，因为它不需要外部库文件，但更新时需要重新编译。动态链接程序更容易更新，但需要确保所需的库文件可用。 性能： 通常情况下，静态链接的性能 略高于动态链接，因为所有代码都包含在可执行文件中，无需运行时加载。 选择静态链接或动态链接取决于项目的需求和目标。一些操作系统和开发环境支持同时使用两者，以实现最佳的灵活性和性能。 什么是多继承（Multiple Inheritance）？在C++中如何实现多继承？回答： 多继承是C++中一种面向对象编程的特性，允许一个类继承多个基类的特性和行为。在C++中，可以通过以下方式实现多继承： 1234567891011121314151617181920class BaseClass1 &#123;public: void func1() &#123; // BaseClass1 的成员函数 &#125;&#125;;class BaseClass2 &#123;public: void func2() &#123; // BaseClass2 的成员函数 &#125;&#125;;class DerivedClass : public BaseClass1, public BaseClass2 &#123;public: void func3() &#123; // DerivedClass 的成员函数 &#125;&#125;; DerivedClass从BaseClass1和BaseClass2继承了成员函数func1和func2。 多继承允许一个类拥有多个父类，但需要注意解决潜在的二义性问题。例如，如果两个基类都有相同名称的成员函数，需要使用作用域解析符号来指定调用哪个版本。 多继承可以提供更丰富的代码复用和组织，但也可能导致复杂性增加，因为需要处理潜在的二义性和命名冲突。 什么是智能指针（Smart Pointer）？它们在C++中的作用是什么？回答： 智能指针是C++中的一种数据类型，用于管理动态分配的内存，以防止内存泄漏和悬挂指针等问题。C++标准库提供了两种主要类型的智能指针：std::shared_ptr和std::unique_ptr。 std::shared_ptr： 允许多个智能指针共享同一块内存。 使用引用计数来跟踪共享对象的引用数，当引用计数为零时，自动释放内存。 适用于多个指针需要访问相同对象的情况。 std::unique_ptr： 限制只有一个智能指针可以拥有和管理特定内存块。 适用于单一所有权的情况，可以确保内存的独占性。 移动语义允许将所有权从一个unique_ptr转移给另一个。 智能指针的作用包括： 自动内存管理： 智能指针负责在对象不再需要时释放内存，从而避免内存泄漏。 资源管理： 除了内存，智能指针还可以用于管理其他资源，如文件句柄和数据库连接。 避免悬挂指针： 智能指针的生命周期与所管理的对象相关联，当对象不再存在时，智能指针会自动置为nullptr，避免悬挂指针的问题。 使用智能指针可以提高代码的可维护性和安全性，减少手动内存管理的错误。 什么是虚函数（Virtual Function）？它在C++中有什么作用？回答： 虚函数是C++中一种用于实现多态性（polymorphism）的重要特性。虚函数允许子类（派生类）重写（覆盖）基类（父类）中的同名函数，从而在运行时实现动态绑定。以下是虚函数的关键概念和作用： 虚函数声明： 在基类中，可以通过在函数声明前面添加virtual关键字来声明虚函数。子类可以选择性地重写这些虚函数。 123456class Base &#123;public: virtual void myFunction() &#123; // 基类虚函数的实现 &#125;&#125;; 函数覆盖： 子类可以覆盖基类的虚函数，提供自己的实现。 123456class Derived : public Base &#123;public: void myFunction() override &#123; // 子类覆盖的虚函数实现 &#125;&#125;; 动态绑定： 当通过基类指针或引用调用虚函数时，实际执行的是派生类的版本。这个机制称为动态绑定，它使多态性成为可能。 12Base* ptr = new Derived();ptr-&gt;myFunction(); // 调用Derived类的实现 虚函数的作用在于实现了多态性，允许通过基类接口操作派生类对象，同时保持了运行时的灵活性和可扩展性。 什么是模板元编程（Template Metaprogramming）？在C++中如何使用模板元编程？回答： 模板元编程是一种使用C++模板系统来进行编程的技术，它允许在编译时执行计算和生成代码。模板元编程的核心思想是利用模板特化、递归和编译期常量等功能来进行元编程，生成通用、高性能的代码。 模板元编程的应用包括： 泛型编程： 通过模板编写通用的数据结构和算法，可以在编译时根据不同类型生成高效的代码。 1234template &lt;typename T&gt;T add(T a, T b) &#123; return a + b;&#125; 编译时计算： 模板元编程可以在编译时执行计算，生成常量表达式的结果。 123456789template &lt;int N&gt;struct Factorial &#123; static const int value = N * Factorial&lt;N - 1&gt;::value;&#125;;template &lt;&gt;struct Factorial&lt;0&gt; &#123; static const int value = 1;&#125;; 元编程技巧： 模板元编程还可以用于元编程技巧，如类型萃取、类型转换等。 123456789template &lt;typename T&gt;struct TypeTrait &#123; static const bool is_integer = false;&#125;;template &lt;&gt;struct TypeTrait&lt;int&gt; &#123; static const bool is_integer = true;&#125;; 模板元编程的主要优势在于它在编译时执行，因此可以产生高性能的代码，并在类型安全和泛型性方面提供了强大的工具。但它也可能导致复杂的代码和编译错误，因此需要谨慎使用。 什么是移动语义（Move Semantics）？它在C++中有什么作用？回答： 移动语义是C++11引入的一个特性，旨在提高程序性能，特别是在处理大型数据结构时。移动语义允许将资源的所有权从一个对象转移到另一个对象，而无需复制数据。这主要通过移动构造函数和移动赋值运算符来实现。 移动语义的关键概念包括： 移动构造函数（Move Constructor）： 移动构造函数允许从一个临时对象或右值引用（通常是即将销毁的对象）中“窃取”资源，而不是复制资源。 123456class MyString &#123;public: MyString(MyString&amp;&amp; other) &#123; // 移动构造函数，窃取资源 &#125;&#125;; 移动赋值运算符（Move Assignment Operator）： 移动赋值运算符允许将资源从一个对象转移到另一个对象，以替代传统的复制赋值。 1234MyString&amp; operator=(MyString&amp;&amp; other) &#123; // 移动赋值运算符，窃取资源 return *this;&#125; 移动语义的主要作用在于： 提高性能：避免不必要的数据复制，特别是在处理大型数据结构时可以显著提高性能。 支持移动语义的标准库容器和算法：标准库容器（如std::vector）和算法（如std::sort）都已经更新，以支持移动语义，允许更高效地管理和操作对象。 支持移动语义的用户定义类型：用户可以为自己的类型定义移动构造函数和移动赋值运算符，以充分利用移动语义。 移动语义是C++中的重要特性，可用于提高性能和资源管理的效率。 什么是RAII（资源获取即初始化）？它在C++中有什么作用？回答： RAII（Resource Acquisition Is Initialization）是C++中一种编程惯例，强调在对象的构造期间获取资源，并在对象的析构期间释放资源。RAII的核心思想是利用栈上对象的生命周期来管理资源，以确保资源在任何情况下都会得到正确释放， 避免资源泄漏。 RAII的应用包括： 内存管理： 使用智能指针（如std::shared_ptr和std::unique_ptr）来管理动态分配的内存，确保在对象生命周期结束时自动释放内存。 1234&#123; std::shared_ptr&lt;int&gt; ptr = std::make_shared&lt;int&gt;(42); // 获取内存资源 // 在此作用域结束时，资源会自动释放&#125; 文件和资源管理： 使用RAII对象管理文件句柄、数据库连接、锁等资源，以确保在离开作用域时资源会被正确释放。 1234&#123; std::ofstream file(&quot;example.txt&quot;); // 打开文件 // 在此作用域结束时，文件会自动关闭&#125; 异常安全性： RAII可以确保在发生异常时资源会被正确释放，从而保证程序的异常安全性。 RAII是C++中许多标准库和用户定义类型的设计原则，它简化了资源管理和提高了程序的可维护性和可靠性。 什么是STL（Standard Template Library）？它包括哪些常见组件？回答： STL（Standard Template Library）是C++标准库的一部分，它提供了一组通用的模板类和函数，用于实现常见的数据结构和算法。STL的目标是提供高性能、可重用的组件，以便开发人员可以更容易地编写高效且可维护的C++代码。 STL包括以下常见组件： 容器（Containers）： 容器是用于存储和组织数据的数据结构，STL提供了多种容器，包括vector、list、map、set等。每种容器都有特定的用途和性能特性。 算法（Algorithms）： STL提供了一组强大的算法，用于在容器上执行各种操作，如排序、查找、遍历等。这些算法可以与不同类型的容器一起使用，提供了通用的接口。 迭代器（Iterators）： 迭代器用于遍历容器中的元素，STL定义了多种类型的迭代器，包括输入迭代器、输出迭代器、正向迭代器、双向迭代器和随机访问迭代器。 函数对象（Function Objects）： 函数对象是可调用对象，它们可以像函数一样被调用，并且可以在STL算法中使用。STL提供了一些内置的函数对象，也允许用户定义自己的函数对象。 适配器（Adapters）： 适配器用于修改或扩展容器和迭代器的行为，如stack、queue、priority_queue等。 STL的设计原则包括通用性、高性能和可复用性，使其成为C++编程中不可或缺的一部分，可以大大简化数据结构和算法的实现。 什么是多态性（Polymorphism）？在C++中如何实现多态性？回答： 多态性是面向对象编程的核心概念之一，它允许不同类的对象对相同的消息作出不同的响应。多态性有两种主要形式：编译时多态性和运行时多态性。 在C++中，运行时多态性通常通过虚函数和基类指针&#x2F;引用实现。以下是多态性的关键概念和实现方式： 虚函数（Virtual Function）： 虚函数是在基类中声明的函数，可以在派生类中被重写（覆盖）。通过在函数声明前面加上virtual关键字来定义虚函数。 123456class Base &#123;public: virtual void myFunction() &#123; // 基类虚函数的实现 &#125;&#125;; 函数重写（Function Overriding）： 派生类可以重写基类中的虚函数，提供自己的实现。 123456class Derived : public Base &#123;public: void myFunction() override &#123; // 派生类覆盖的虚函数实现 &#125;&#125;; 基类指针和引用： 基类指针或引用可以指向派生类对象，并在运行时调用派生类的虚函数。 12Base* ptr = new Derived();ptr-&gt;myFunction(); // 调用Derived类的实现 多态性的优点包括代码的灵活性和可扩展性，因为可以根据需要轻松添加新的派生类，而无需修改现有代码。多态性还支持面向接口编程，允许根据对象的行为而不是具体类型进行编程。 什么是单例模式（Singleton Pattern）？在C++中如何实现单例模式？回答： 单例模式是一种设计模式，它确保类只有一个实例，并提供一种全局访问该实例的方式。单例模式通常用于那些需要在整个应用程序中共享一个资源或状态的情况。在C++中，可以通过以下方式实现单例模式： 1234567891011121314151617181920212223class Singleton &#123;public: // 获取单例实例的静态方法 static Singleton&amp; getInstance() &#123; static Singleton instance; // 在首次调用时创建单例 return instance; &#125; // 阻止拷贝构造和赋值操作 Singleton(Singleton const&amp;) = delete; void operator=(Singleton const&amp;) = delete; // 其他成员函数 void someFunction() &#123; // 单例的成员函数实现 &#125;private: // 私有构造函数，防止外部创建实例 Singleton() &#123; // 初始化单例 &#125;&#125;; 上述代码中，Singleton类的构造函数是私有的，只能在类的内部访问，从而防止外部代码创建多个实例。getInstance方法返回单例的引用，首次调用时创建实例。 此外，通过删除拷贝构造函数和赋值操作符，可以防止通过复制创建多个实例。 单例模式确保只有一个实例，因此可以全局共享状态和资源，但也要小心全局状态可能导致的问题。 什么是模板（Template）？在C++中如何使用模板？回答： 模板是C++中的一种机制，允许编写通用代码，不受特定数据类型的限制。模板使得可以编写具有类型参数的函数和类，这些类型参数可以在使用模板时进行替换。 在C++中，有两种主要类型的模板： 函数模板（Function Template）： 函数模板允许编写可以处理不同类型的函数，通过将类型参数作为函数参数进行通用化。例如，以下是一个通用的max函数模板： 1234template &lt;typename T&gt;T max(T a, T b) &#123; return a &gt; b ? a : b;&#125; 类模板（Class Template）： 类模板允许编写可以处理不同类型的类，通过将类型参数作为类成员或成员函数参数进行通用化。例如，以下是一个通用的堆栈（Stack）类模板： 12345678template &lt;typename T&gt;class Stack &#123;public: // 类模板成员和成员函数 void push(T item); T pop(); // ...&#125;; 使用模板时，可以提供具体的类型参数，从而生成特定类型的代码实例。例如： 1234567int main() &#123; int a = 5, b = 10; int result = max(a, b); // 使用函数模板 Stack&lt;double&gt; doubleStack; // 使用类模板 // ... return 0;&#125; 模板使得可以编写高度 通用和可重用的代码，适用于各种数据类型。它在STL（标准模板库）中广泛应用，用于实现通用数据结构和算法。 什么是析构函数（Destructor）？为什么它重要？回答： 析构函数是C++中的一个特殊成员函数，用于对象的清理和资源释放。析构函数的名称与类名相同，前面加上~符号。析构函数在以下情况下重要： 资源释放： 析构函数用于释放对象在其生命周期中分配的资源，如内存、文件句柄、数据库连接等。这有助于避免资源泄漏。 对象生命周期控制： 析构函数确定了对象在销毁时应采取的行动，例如关闭文件或释放锁定。 异常处理： 析构函数可以用于处理对象生命周期中的异常情况，确保资源在异常时得到释放。 子类析构函数： 在继承中，基类的析构函数通常是虚的，以确保在销毁子类对象时正确调用基类析构函数，从而实现多态的析构。 示例： 123456789class MyClass &#123;public: MyClass() &#123; // 构造函数的代码 &#125; ~MyClass() &#123; // 析构函数的代码，用于释放资源 &#125;&#125;; 确保在需要时正确实现析构函数，以避免资源泄漏和不稳定的程序行为。 什么是预处理器（Preprocessor）？它在C&#x2F;C++中有什么作用？回答： 预处理器是C和C++编译过程中的一个独立阶段，用于在实际编译之前处理源代码。预处理器的主要作用包括： 宏替换： 预处理器可以替换源代码中的宏定义，例如使用#define定义的宏常量或宏函数。 文件包含： 预处理器使用#include指令将其他文件的内容插入源文件中，允许代码的模块化组织。 条件编译： 预处理器使用条件编译指令，如#ifdef和#ifndef，可以根据条件选择性地包含或排除代码块。 注释删除： 预处理器删除源代码中的注释，以减小编译后的可执行文件的大小。 宏展开： 预处理器展开宏，将宏调用替换为宏定义的实际内容。 示例： 1234567891011#define MAX_VALUE 100 // 宏定义#include &lt;iostream&gt; // 文件包含#ifdef DEBUG // 调试代码#endifint main() &#123; int value = MAX_VALUE; // 宏替换 return 0;&#125; 预处理器通过生成经过处理的源代码，然后将其传递给编译器进行编译，起到了代码预处理和条件编译的作用。 什么是静态多态性（Static Polymorphism）和动态多态性（Dynamic Polymorphism）？它们之间有什么区别？回答： 静态多态性（Static Polymorphism）： 静态多态性也称为编译时多态性，是在编译时确定函数调用的方式。它通常与函数重载（Function Overloading）相关，其中编译器根据函数名称、参数类型和个数来选择正确的函数版本。静态多态性的优点在于效率高，因为函数调用在编译时就已经解析，不需要额外的运行时开销。 1234567891011121314151617void print(int x) &#123; std::cout &lt;&lt; &quot;Printing integer: &quot; &lt;&lt; x &lt;&lt; std::endl;&#125;void print(double y) &#123; std::cout &lt;&lt; &quot;Printing double: &quot; &lt;&lt; y &lt;&lt; std::endl;&#125;int main() &#123; int a = 42; double b = 3.14; print(a); // 编译时确定调用 print(int) print(b); // 编译时确定调用 print(double) return 0;&#125; 动态多态性（Dynamic Polymorphism）： 动态多态性也称为运行时多态性，是在运行时根据对象的实际类型来确定函数调用的方式。它通常与虚函数（Virtual Function）和继承相关。通过虚函数，基类指针或引用可以调用派生类的函数，而具体的函数实现是在运行时根据对象的类型来选择的。动态多态性的优点在于它支持多态行为，允许基类接口处理派生类对象。 123456789101112131415161718192021class Shape &#123;public: virtual void draw() &#123; std::cout &lt;&lt; &quot;Drawing a shape&quot; &lt;&lt; std::endl; &#125;&#125;;class Circle : public Shape &#123;public: void draw() override &#123; std::cout &lt;&lt; &quot;Drawing a circle&quot; &lt;&lt; std::endl; &#125;&#125;;int main() &#123; Shape* shapePtr = new Circle(); shapePtr-&gt;draw(); // 运行时确定调用 Circle 的 draw 函数 delete shapePtr; return 0;&#125; 区别： 静态多态性在编译时确定函数调用，效率高，但不支持多态行为。 动态多态性在运行时确定函数调用，支持多态行为，但可能带来一些运行时开销。 通常，C++开发中根据需要选择使用静态多态性或动态多态性，以满足特定的设计需求。 什么是智能指针（Smart Pointer）？在C++中有哪些智能指针？回答： 智能指针是C++中的一种数据类型，用于管理动态分配的内存，以帮助避免内存泄漏和悬挂指针等问题。C++标准库提供了以下几种智能指针： std::unique_ptr： std::unique_ptr表示独占所有权的智能指针，确保只有一个指针可以拥有和管理特定内存块。 移动语义允许将所有权从一个unique_ptr转移给另一个。 通常用于实现独占拥有的情况。 1std::unique_ptr&lt;int&gt; ptr = std::make_unique&lt;int&gt;(42); std::shared_ptr： std::shared_ptr表示多个智能指针可以共享相同内存块的所有权。 使用引用计数来跟踪共享对象的引用数，当引用计数为零时，自动释放内存。 适用于多个指针需要访问相同对象的情况。 12std::shared_ptr&lt;int&gt; ptr1 = std::make_shared&lt;int&gt;(42);std::shared_ptr&lt;int&gt; ptr2 = ptr1; // 共享所有权 std::weak_ptr： std::weak_ptr是一种弱引用智能指针，它允许共享对象的引用但不增加引用计数。 主要用于解决std::shared_ptr的循环引用问题，防止内存泄漏。 可以通过std::shared_ptr转换为std::weak_ptr。 12std::shared_ptr&lt;int&gt; shared = std::make_shared&lt;int&gt;(42);std::weak_ptr&lt;int&gt; weak = shared; 智能指针的主要作用在于自动管理动态分配的内存，避免手动调用new和delete，从而提高代码的可维护性和安全性。 什么是异常处理（Exception Handling）？在C++中如何进行异常处理？回答： 异常处理是一种程序设计和错误处理的方法，用于处理程序在运行时遇到的异常情况。异常是指不寻常的、不正常的情况，可能导致程序中断或不正常行为。在C++中，异常处理可以通过以下关键字和机制来实现： try： 使用try关键字来定义一个包含可能引发异常的代码块。 123456789try &#123; // 可能引发异常的代码&#125; catch (ExceptionType1 e1) &#123; // 处理 ExceptionType1 异常的代码&#125; catch (ExceptionType2 e2) &#123; // 处理 ExceptionType2 异常的代码&#125; catch (...) &#123; // 处理其他异常的代码&#125; throw： 使用throw关键字来引发异常。可以引发各种类型的异常，包括内置类型、自定义类型、标准库异常等。 123if (error_condition) &#123; throw MyException(&quot;An error occurred&quot;);&#125; catch： 使用catch关键字来捕获并处理特定类型的异常。一个try块可以有多个catch块，用于处理不同类型的异常。 自定义异常类型： 可以自定义异常类型，通过继承自std::exception或其派生类，来表示特定的异常情况，并提供异常信息。 1234567891011class MyException : public std::exception &#123;public: MyException(const char* message) : message_(message) &#123;&#125; const char* what() const noexcept override &#123; return message_.c_str(); &#125;private: std::string message_;&#125;; std::exception： std::exception是C++标准库中定义的 基本异常类，可以用作自定义异常类型的基类。 异常处理允许程序在遇到异常情况时从当前执行路径跳转到异常处理代码，从而实现错误处理和程序稳定性。合理的异常处理可以确保程序在发生异常时不会崩溃，并提供有关异常原因的信息，以便进行故障排除和修复。 什么是静态多态性（Static Polymorphism）和动态多态性（Dynamic Polymorphism）？它们之间有什么区别？回答： 静态多态性（Static Polymorphism）： 静态多态性也称为编译时多态性，是在编译时确定函数调用的方式。它通常与函数重载（Function Overloading）相关，其中编译器根据函数名称、参数类型和个数来选择正确的函数版本。静态多态性的优点在于效率高，因为函数调用在编译时就已经解析，不需要额外的运行时开销。 1234567891011121314151617void print(int x) &#123; std::cout &lt;&lt; &quot;Printing integer: &quot; &lt;&lt; x &lt;&lt; std::endl;&#125;void print(double y) &#123; std::cout &lt;&lt; &quot;Printing double: &quot; &lt;&lt; y &lt;&lt; std::endl;&#125;int main() &#123; int a = 42; double b = 3.14; print(a); // 编译时确定调用 print(int) print(b); // 编译时确定调用 print(double) return 0;&#125; 动态多态性（Dynamic Polymorphism）： 动态多态性也称为运行时多态性，是在运行时根据对象的实际类型来确定函数调用的方式。它通常与虚函数（Virtual Function）和继承相关。通过虚函数，基类指针或引用可以调用派生类的函数，而具体的函数实现是在运行时根据对象的类型来选择的。动态多态性的优点在于它支持多态行为，允许基类接口处理派生类对象。 123456789101112131415161718192021class Shape &#123;public: virtual void draw() &#123; std::cout &lt;&lt; &quot;Drawing a shape&quot; &lt;&lt; std::endl; &#125;&#125;;class Circle : public Shape &#123;public: void draw() override &#123; std::cout &lt;&lt; &quot;Drawing a circle&quot; &lt;&lt; std::endl; &#125;&#125;;int main() &#123; Shape* shapePtr = new Circle(); shapePtr-&gt;draw(); // 运行时确定调用 Circle 的 draw 函数 delete shapePtr; return 0;&#125; 区别： 静态多态性在编译时确定函数调用，效率高，但不支持多态行为。 动态多态性在运行时确定函数调用，支持多态行为，但可能带来一些运行时开销。 通常，C++开发中根据需要选择使用静态多态性或动态多态性，以满足特定的设计需求。 我明白了，让我为您提供一些新的问题和答案，以避免重复： 什么是C++中的引用（Reference）？回答： 引用是C++中的一种数据类型，它允许一个变量引用（别名）另一个变量。引用提供了对变量的间接访问方式，使得可以通过不同的名字访问相同的内存位置。引用的主要特点包括： 引用必须在定义时初始化，并且一旦初始化，就不能再引用其他对象。 引用在使用时不需要解引用操作（使用*符号），因为它们本身就是别名。 引用通常用于函数参数，以便通过引用传递参数，从而避免复制大量数据。 示例： 1234int x = 42;int&amp; ref = x; // 引用 x，ref 成为 x 的别名ref = 10; // 修改 x 的值，ref 也会跟着变成 10 引用在C++中广泛用于函数参数传递、操作符重载和STL中，以提供更高效的代码和更自然的语法。 什么是C++中的析构函数（Destructor）？回答： 析构函数是C++中的一种特殊成员函数，它用于在对象生命周期结束时执行必要的清理和资源释放操作。析构函数的名称与类名相同，但前面加上波浪号（~）。 析构函数的主要作用包括： 释放对象在其生命周期中分配的资源，如内存、文件句柄、数据库连接等。 控制对象的生命周期，确保在对象销毁时执行必要的操作。 处理对象生命周期中的异常情况，以确保资源不会泄漏。 示例： 12345678910111213141516171819class FileHandler &#123;public: FileHandler(const std::string&amp; filename) &#123; file = std::fopen(filename.c_str(), &quot;r&quot;); if (!file) &#123; throw std::runtime_error(&quot;Failed to open file&quot;); &#125; &#125; ~FileHandler() &#123; if (file) &#123; std::fclose(file); &#125; &#125; // 其他成员函数，用于文件操作private: std::FILE* file;&#125;; 在上述示例中，FileHandler类的析构函数用于关闭文件句柄，确保文件在对象生命周期结束时被正确关闭。 C++中的多重继承是什么？它有什么特点和潜在的问题？回答： 多重继承是C++中的一种面向对象编程概念，它允许一个类从多个基类继承属性和行为。多重继承的特点和潜在问题包括： 特点： 一个派生类可以继承多个基类的成员，包括数据成员和成员函数。 可以实现不同类之间的复杂关系，例如混合多个不同类型的功能。 潜在问题： 菱形继承问题（Diamond Inheritance Problem）： 当一个类通过多条路径继承同一个基类时，可能导致同一基类的多个实例被创建，引发二义性。 函数名冲突： 如果多个基类具有相同名称的成员函数，可能导致函数名冲突，需要使用作用域解析运算符（::）来解决。 复杂性增加： 多重继承会增加类之间的复杂性，使得代码更难理解和维护。 解决多重继承问题的方法包括虚继承（使用virtual继承来解决菱形继承问题）、作用域解析运算符（::）、以及合理的设计，避免深层次和复杂的继承结构。 多重继承应慎重使用，通常在需要时才使用，以避免引发潜在问题。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://ycx81.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"C/C++","slug":"C-C","permalink":"http://ycx81.github.io/tags/C-C/"},{"name":"知识手册","slug":"知识手册","permalink":"http://ycx81.github.io/tags/%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"}]},{"title":"hexo常用命令","slug":"hexo常用命令","date":"2023-01-23T05:42:39.000Z","updated":"2023-08-23T11:10:19.099Z","comments":true,"path":"2023/01/23/hexo常用命令/","link":"","permalink":"http://ycx81.github.io/2023/01/23/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"Hexo 常用命令手册本功能手册提供了Hexo静态网站生成器的常用命令列表，以及它们的功能和用法说明。","text":"Hexo 常用命令手册本功能手册提供了Hexo静态网站生成器的常用命令列表，以及它们的功能和用法说明。 1. hexo init &lt;folder&gt;功能： 初始化新的Hexo站点。 用法： 初始化Hexo站点时，需指定一个文件夹名称作为参数。此命令会在指定文件夹内生成站点文件结构和配置。 2. hexo new &lt;title&gt;功能： 创建新的博客文章。 用法： 使用此命令创建博客文章，需提供文章标题作为参数。Hexo会自动生成对应的Markdown文件，供编写文章内容。 3. hexo generate 或 hexo g功能： 生成静态网站文件。 用法： 使用此命令将source文件夹中的Markdown文件转化成HTML，生成静态页面。生成的文件存储在public文件夹中。 4. hexo server 或 hexo s功能： 启动本地服务器，以便本地预览博客。 用法： 默认情况下，此命令在本地启动服务器，可通过浏览器访问http://localhost:4000查看生成的网站。 5. hexo deploy功能： 部署生成的静态网站到托管平台。 用法： 在Hexo配置文件中设置部署信息，使用此命令将网站内容上传至托管平台，如GitHub Pages或自定义服务器。 6. hexo clean功能： 清除Hexo生成的临时文件和缓存。 用法： 通常用于解决问题或重新生成整个网站。清理后，可再次运行hexo generate重新生成网站。 7. hexo new page &lt;name&gt;功能： 创建新的页面。 用法： 类似于创建文章，但页面通常用于静态内容，如“关于”或“联系”页面。它们存储在source/_pages目录中。 8. hexo list功能： 列出所有已创建的文章和页面。 用法： 可查看当前站点的所有内容。 9. hexo publish &lt;title&gt;功能： 发布一篇草稿。 用法： 提供文章标题作为参数，Hexo将草稿文件从source/_drafts移动到source/_posts目录，发布文章。 10. hexo draft &lt;title&gt;功能： 创建新的草稿文章。 用法： 草稿是未发布的文章，存储在source/_drafts目录中，以后可使用hexo publish命令发布。 11. hexo new draft &lt;title&gt;功能： 创建并同时发布一篇草稿文章。 用法： 与上述命令不同，此命令创建文章后将其移动到source/_posts目录，即发布状态。 12. hexo server -d 或 hexo s -d功能： 启动本地服务器并监听文件变化。 用法： 编辑博客内容时，Hexo检测文件更改，并自动重新生成网站，可实时预览修改。 13. hexo generate –watch 或 hexo g –watch功能： 生成静态网站并监听文件变化。 用法： 类似于上一个命令，但只生成网站，不启动服务器。适用于生成后手动刷新预览的情况。 这些是Hexo静态网站生成器的常用命令，用于创建、管理和部署静态博客网站。根据需求，可进一步探索Hexo文档以获取关于配置和高级命令的信息。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://ycx81.github.io/tags/hexo/"},{"name":"知识手册","slug":"知识手册","permalink":"http://ycx81.github.io/tags/%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"}]},{"title":"为什么是127.0.0.1","slug":"为什么是127-0-0-1","date":"2022-10-12T10:56:20.000Z","updated":"2023-08-23T07:59:43.519Z","comments":true,"path":"2022/10/12/为什么是127-0-0-1/","link":"","permalink":"http://ycx81.github.io/2022/10/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF127-0-0-1/","excerpt":"0x00 前言 刚学习网络时，总看到书上配置的ip地址总是127.0.0.1，遂查找网络进行扫盲。","text":"0x00 前言 刚学习网络时，总看到书上配置的ip地址总是127.0.0.1，遂查找网络进行扫盲。 IP地址 127.0.0.1 是一个特殊的地址，通常被称为”本地主机”或”回环地址”（Loopback Address）。这个地址是为了在计算机上进行自我测试和本地通信而设计的，具有以下重要特点： 只在本地使用：IP地址 127.0.0.1 只能在同一台计算机内部使用，不能被用于跨计算机的网络通信。这是因为它被用于回送到计算机本身的网络数据。 自我测试：开发人员可以在本地主机上测试网络应用程序，而无需连接到外部网络或依赖外部服务器。这有助于确保应用程序在没有网络连接的情况下也能正常工作。 无需网络硬件：使用回环地址，您可以在没有网络连接的情况下测试应用程序，因为数据不会离开计算机。 简单的配置：回环地址不需要任何特殊配置或硬件支持。它通常在任何支持TCP&#x2F;IP协议的计算机上都可用。 标准化：回环地址 127.0.0.1 是一个标准化的IPv4回环地址。IPv6的回环地址是 “::1”。 用途广泛：回环地址在本地开发、测试网络应用程序、诊断网络问题等方面被广泛使用。它也在系统中的某些本地服务中使用，以便这些服务可以在不涉及网络的情况下与其他应用程序通信。 总之，IP地址 127.0.0.1 是为了在计算机上进行本地测试和通信而设计的，它允许应用程序在不需要外部网络连接的情况下进行自我测试和开发。它在开发和调试网络应用程序时非常有用。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://ycx81.github.io/tags/%E7%BD%91%E7%BB%9C/"}]}],"categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"随笔","slug":"随笔","permalink":"http://ycx81.github.io/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"日记","permalink":"http://ycx81.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://ycx81.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"C/C++","slug":"C-C","permalink":"http://ycx81.github.io/tags/C-C/"},{"name":"知识手册","slug":"知识手册","permalink":"http://ycx81.github.io/tags/%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"},{"name":"redis","slug":"redis","permalink":"http://ycx81.github.io/tags/redis/"},{"name":"C++","slug":"C","permalink":"http://ycx81.github.io/tags/C/"},{"name":"吃","slug":"吃","permalink":"http://ycx81.github.io/tags/%E5%90%83/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://ycx81.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"hexo","slug":"hexo","permalink":"http://ycx81.github.io/tags/hexo/"},{"name":"网络","slug":"网络","permalink":"http://ycx81.github.io/tags/%E7%BD%91%E7%BB%9C/"}]}