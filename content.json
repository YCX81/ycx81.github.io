{"meta":{"title":"YCX-Blog","subtitle":"YCX的个人博客","description":"YCX的个人博客，每日更新","author":"YCX","url":"http://ycx81.github.io","root":"/"},"pages":[{"title":"archives","date":"2023-07-24T08:18:22.000Z","updated":"2023-07-24T08:18:22.678Z","comments":true,"path":"archives/index.html","permalink":"http://ycx81.github.io/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-07-24T13:57:54.000Z","updated":"2023-07-25T03:03:15.869Z","comments":true,"path":"categories/index.html","permalink":"http://ycx81.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2023-07-25T07:42:39.000Z","updated":"2023-07-25T08:43:22.616Z","comments":true,"path":"about/index.html","permalink":"http://ycx81.github.io/about/index.html","excerpt":"","text":"神秘的YCX不想在这留下任何有效地址😜"},{"title":"","date":"2023-07-25T07:52:35.843Z","updated":"2023-07-24T14:24:30.042Z","comments":true,"path":"404/index.html","permalink":"http://ycx81.github.io/404/index.html","excerpt":"","text":"​—title: ‘404’date: 2023-07-24 16:24:02comments: false​—"},{"title":"tags","date":"2023-07-24T13:55:00.000Z","updated":"2023-07-24T14:25:39.727Z","comments":true,"path":"tags/index.html","permalink":"http://ycx81.github.io/tags/index.html","excerpt":"","text":""},{"title":"sitemap","date":"2023-07-24T08:18:51.000Z","updated":"2023-07-24T14:26:05.167Z","comments":true,"path":"sitemap/index.html","permalink":"http://ycx81.github.io/sitemap/index.html","excerpt":"","text":""}],"posts":[{"title":"Redis简易手册","slug":"Redis简易手册","date":"2023-08-23T06:46:13.000Z","updated":"2023-08-23T07:00:46.659Z","comments":true,"path":"2023/08/23/Redis简易手册/","link":"","permalink":"http://ycx81.github.io/2023/08/23/Redis%E7%AE%80%E6%98%93%E6%89%8B%E5%86%8C/","excerpt":"&#x2F;&#x2F;首页文章展示缩略图 0x00 前言 近期在B站看到一个1小时教学Redis，全程没有废话，粗略过了一遍，并对其主要知识点进行总结。 【【GeekHour】一小时Redis教程-哔哩哔哩】 https://b23.tv/MzEWwWh","text":"&#x2F;&#x2F;首页文章展示缩略图 0x00 前言 近期在B站看到一个1小时教学Redis，全程没有废话，粗略过了一遍，并对其主要知识点进行总结。 【【GeekHour】一小时Redis教程-哔哩哔哩】 https://b23.tv/MzEWwWh 以下是一些常用的Redis命令，使用Markdown语法进行总结： 连接与配置 连接到Redis服务器：redis-cli 显示Redis服务器信息：INFO 查看配置文件的路径：CONFIG GET dir 修改配置项：CONFIG SET &lt;config-name&gt; &lt;value&gt; 查看Redis版本：redis-server -v 键操作 设置键值对：SET &lt;key&gt; &lt;value&gt; 获取键对应的值：GET &lt;key&gt; 删除键值对：DEL &lt;key&gt; 检查键是否存在：EXISTS &lt;key&gt; 设置键的过期时间（秒）：EXPIRE &lt;key&gt; &lt;seconds&gt; 移除键的过期时间：PERSIST &lt;key&gt; 查看键的剩余过期时间（秒）：TTL &lt;key&gt; 列表操作 向列表头部添加元素：LPUSH &lt;key&gt; &lt;value&gt; 向列表尾部添加元素：RPUSH &lt;key&gt; &lt;value&gt; 获取列表长度：LLEN &lt;key&gt; 获取列表指定范围的元素：LRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt; 弹出并返回列表头部元素：LPOP &lt;key&gt; 弹出并返回列表尾部元素：RPOP &lt;key&gt; 集合操作 向集合添加一个元素：SADD &lt;key&gt; &lt;member&gt; 获取集合的所有成员：SMEMBERS &lt;key&gt; 检查元素是否是集合的成员：SISMEMBER &lt;key&gt; &lt;member&gt; 移除集合中的一个元素：SREM &lt;key&gt; &lt;member&gt; 计算集合的交集、并集或差集：SINTER, SUNION, SDIFF 哈希操作 设置哈希字段值：HSET &lt;key&gt; &lt;field&gt; &lt;value&gt; 获取哈希字段值：HGET &lt;key&gt; &lt;field&gt; 获取哈希所有字段和值：HGETALL &lt;key&gt; 删除哈希字段：HDEL &lt;key&gt; &lt;field&gt; 查看哈希字段数量：HLEN &lt;key&gt; 有序集合操作 向有序集合添加成员及分数：ZADD &lt;key&gt; &lt;score&gt; &lt;member&gt; 获取有序集合的成员列表：ZRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt; 根据分数范围获取有序集合的成员：ZRANGEBYSCORE &lt;key&gt; &lt;min&gt; &lt;max&gt; 获取有序集合的成员数量：ZCARD &lt;key&gt; 移除有序集合中的成员：ZREM &lt;key&gt; &lt;member&gt; 发布与订阅 订阅频道：SUBSCRIBE &lt;channel&gt; 取消订阅频道：UNSUBSCRIBE &lt;channel&gt; 发布消息到频道：PUBLISH &lt;channel&gt; &lt;message&gt; 排序和排名 按分数升序排列有序集合的成员：ZREVRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt; 获取有序集合中成员的排名：ZRANK &lt;key&gt; &lt;member&gt; 获取有序集合中成员的分数：ZSCORE &lt;key&gt; &lt;member&gt; 模式匹配 使用通配符查找键名：KEYS &lt;pattern&gt; 批量删除符合条件的键：DEL &lt;pattern&gt; 列出匹配的键名：SCAN &lt;cursor&gt; MATCH &lt;pattern&gt; COUNT &lt;count&gt; 事务 开启事务：MULTI 执行事务：EXEC 取消事务：DISCARD 管道 使用管道执行多个命令：可以通过一次网络往返执行多个命令以提高性能，使用PIPELINE 信息统计 查看内存使用情况：MEMORY STATS 查看服务器状态：INFO SERVER 查看客户端列表：CLIENT LIST 备份和恢复 创建数据快照：SAVE 在后台创建数据快照：BGSAVE 恢复数据：将快照文件复制到Redis数据目录并重启服务器 安全 设置访问密码：CONFIG SET requirepass &lt;password&gt; 验证密码：AUTH &lt;password&gt; 集群 创建Redis集群：使用Redis Cluster 查看集群节点信息：CLUSTER NODES 手动切换主节点：CLUSTER FAILOVER 其他 发送一个即时命令到服务器以查看性能统计信息：INFO COMMANDSTATS 监视键的变化：MONITOR 配置Redis服务器以接受远程连接：修改redis.conf文件中的bind选项 在C++中使用Redis在C++中使用Redis通常需要使用Redis C++客户端库，其中最常用的是hiredis和cpp_redis。以下是在C++中使用Redis的基本步骤以及一些常见操作： 步骤1：安装Redis C++客户端库 首先安装Redis C++客户端库，最常见的选择是hiredis和cpp_redis。您可以使用包管理器（如apt、brew、vcpkg）来安装这些库，或者从官方GitHub存储库手动构建它们。 步骤2：包含头文件 在您的C++代码中，包含适当的Redis客户端库头文件。例如使用cpp_redis则需要包含以下头文件： 1#include &lt;cpp_redis/cpp_redis&gt; 步骤3：建立与Redis的连接 在代码中，使用客户端库提供的函数来建立与Redis服务器的连接。这通常涉及创建一个客户端对象并配置连接参数： 1234cpp_redis::client client;// 设置连接参数client.connect(&quot;localhost&quot;, 6379); 步骤4：执行Redis命令 使用客户端库提供的函数执行Redis命令。以下是一些常见的示例： 123456789// 设置键值对client.set(&quot;my_key&quot;, &quot;my_value&quot;);// 获取键的值client.get(&quot;my_key&quot;);// 执行哈希操作client.hset(&quot;my_hash&quot;, &quot;field1&quot;, &quot;value1&quot;);client.hget(&quot;my_hash&quot;, &quot;field1&quot;); 步骤5：提交命令和处理响应 提交Redis命令并处理响应。可以使用回调函数或阻塞方式等不同的方法来处理响应： 123456789101112131415// 提交命令client.sync_commit();// 处理响应（回调方式）client.get(&quot;my_key&quot;, [](cpp_redis::reply&amp; reply) &#123; if (reply.is_string()) &#123; std::cout &lt;&lt; &quot;Value: &quot; &lt;&lt; reply.as_string() &lt;&lt; std::endl; &#125;&#125;);// 处理响应（阻塞方式）cpp_redis::reply reply = client.sync_commit();if (reply.is_string()) &#123; std::cout &lt;&lt; &quot;Value: &quot; &lt;&lt; reply.as_string() &lt;&lt; std::endl;&#125; 步骤6：关闭连接 在使用完Redis之后，确保关闭与Redis服务器的连接以释放资源： 1client.disconnect(); 要了解更多详细信息和示例，请查阅Redis C++客户端库的文档。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://ycx81.github.io/tags/redis/"}]},{"title":"简易网盘项目00","slug":"简易网盘项目00","date":"2023-07-27T05:08:00.000Z","updated":"2023-07-27T05:28:07.465Z","comments":true,"path":"2023/07/27/简易网盘项目00/","link":"","permalink":"http://ycx81.github.io/2023/07/27/%E7%AE%80%E6%98%93%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE00/","excerpt":"0x00 前言 此项目准备用于应付近期的面试，作为一种简易的Web Server项目，可能需要4-5期迭代开发。本项目将尽可能还原市面上主流的网盘所具有的功能。","text":"0x00 前言 此项目准备用于应付近期的面试，作为一种简易的Web Server项目，可能需要4-5期迭代开发。本项目将尽可能还原市面上主流的网盘所具有的功能。 0x01 第一期开发总纲第一期主要需要实现的功能有服务器端实现命令解析，可能涉及的命令包括： cd 进入服务器对应目录 ls 列出当前路径下的所有文件 pwd 显示当前所处路径 puts filename 上传本地文件到服务器 get filename 下载服务器文件到本地 rm filename 删除服务器上的某文件 mkdir dirname 创建文件夹 非法命令 不响应 0x020x030x04","categories":[],"tags":[]},{"title":"2023.07.26随笔","slug":"2023-07-26随笔","date":"2023-07-26T12:32:22.000Z","updated":"2023-07-26T12:38:40.450Z","comments":true,"path":"2023/07/26/2023-07-26随笔/","link":"","permalink":"http://ycx81.github.io/2023/07/26/2023-07-26%E9%9A%8F%E7%AC%94/","excerpt":"0x00 前言 每天感觉浑身无力，做事没有干劲，犹如一具行尸走肉，这个榴莲披萨薄脆还挺好吃。","text":"0x00 前言 每天感觉浑身无力，做事没有干劲，犹如一具行尸走肉，这个榴莲披萨薄脆还挺好吃。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://ycx81.github.io/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"日记","permalink":"http://ycx81.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"吃","slug":"吃","permalink":"http://ycx81.github.io/tags/%E5%90%83/"}]},{"title":"2023.07.25随笔","slug":"2023-07-25随笔","date":"2023-07-25T11:06:46.000Z","updated":"2023-07-25T12:00:52.195Z","comments":true,"path":"2023/07/25/2023-07-25随笔/","link":"","permalink":"http://ycx81.github.io/2023/07/25/2023-07-25%E9%9A%8F%E7%AC%94/","excerpt":"0x00 前言 今天总算是把博客搭建好了，其中遇到一堆奇怪的问题和各种各样的bug。。。(图为7.21大雨前的三公山)","text":"0x00 前言 今天总算是把博客搭建好了，其中遇到一堆奇怪的问题和各种各样的bug。。。(图为7.21大雨前的三公山) 最近面试的项目还不知道从何下手，每次准备去做的时候又想开摆，真是折磨啊，我发现我到现在写日记还是在纯记流水账哈哈哈哈哈哈","categories":[{"name":"随笔","slug":"随笔","permalink":"http://ycx81.github.io/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"日记","permalink":"http://ycx81.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://ycx81.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"hexo常用命令","slug":"hexo常用命令","date":"2023-01-23T05:42:39.000Z","updated":"2023-08-23T06:45:28.118Z","comments":true,"path":"2023/01/23/hexo常用命令/","link":"","permalink":"http://ycx81.github.io/2023/01/23/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"0x00 前言 根据日常的hexo使用情况，总结一些hexo常用命令，方便及时查询。","text":"0x00 前言 根据日常的hexo使用情况，总结一些hexo常用命令，方便及时查询。 Hexo 是一个流行的静态网站生成器，用于创建和维护博客和静态网站。以下是一些常用的 Hexo 命令： **hexo init &lt;folder&gt;**： 初始化一个新的 Hexo 站点，将站点文件结构创建在指定的文件夹中。 **hexo new &lt;title&gt;**： 创建一篇新的博客文章，指定文章的标题。Hexo 会根据配置生成一个 Markdown 文件，供您编写内容。 hexo generate 或 hexo g： 生成静态网站文件。这会将 Markdown 文件编译成 HTML 并生成静态页面。 hexo server 或 hexo s： 启动一个本地服务器，用于在本地预览您的博客。默认情况下，访问地址为 http://localhost:4000 。 hexo deploy： 部署生成的静态网站到托管平台，如 GitHub Pages 或自定义的服务器。您需要配置部署信息。 hexo clean： 清除 Hexo 生成的临时文件和缓存，通常在出现问题或需要重新生成时使用。 **hexo new page &lt;name&gt;**： 创建一个新的页面，可以是关于页面、联系页面等。类似于创建文章，但它们被存储在 source 目录的 _pages 子目录中。 hexo list： 列出所有已创建的文章和页面。 **hexo publish &lt;title&gt;**： 发布一篇草稿。您可以指定文章标题，Hexo 会将草稿文件移动到 _posts 目录。 **hexo draft &lt;title&gt;**： 创建一篇草稿文章。Hexo 会在 _drafts 目录中创建一个 Markdown 文件，供以后编辑和发布。 **hexo new draft &lt;title&gt;**： 创建并同时发布一篇草稿文章。Hexo 会创建 Markdown 文件并将其移动到 _posts 目录。 hexo server -d 或 hexo s -d： 启动本地服务器并监听文件变化，当文件变化时自动重新生成网站。 hexo generate –watch 或 hexo g –watch： 生成静态网站并监听文件变化，当文件变化时自动重新生成网站。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://ycx81.github.io/tags/hexo/"}]},{"title":"为什么是127.0.0.1","slug":"为什么是127-0-0-1","date":"2022-10-12T10:56:20.000Z","updated":"2023-08-23T07:00:01.254Z","comments":true,"path":"2022/10/12/为什么是127-0-0-1/","link":"","permalink":"http://ycx81.github.io/2022/10/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF127-0-0-1/","excerpt":"0x00 前言 刚学习网络时，总看到书上配置的ip地址总是127.0.0.1，遂查找网络进行扫盲。","text":"0x00 前言 刚学习网络时，总看到书上配置的ip地址总是127.0.0.1，遂查找网络进行扫盲。 IP地址 127.0.0.1 是一个特殊的地址，通常被称为”本地主机”或”回环地址”（Loopback Address）。这个地址是为了在计算机上进行自我测试和本地通信而设计的，具有以下重要特点： 只在本地使用：IP地址 127.0.0.1 只能在同一台计算机内部使用，不能被用于跨计算机的网络通信。这是因为它被用于回送到计算机本身的网络数据。 自我测试：开发人员可以在本地主机上测试网络应用程序，而无需连接到外部网络或依赖外部服务器。这有助于确保应用程序在没有网络连接的情况下也能正常工作。 无需网络硬件：使用回环地址，您可以在没有网络连接的情况下测试应用程序，因为数据不会离开计算机。 简单的配置：回环地址不需要任何特殊配置或硬件支持。它通常在任何支持TCP&#x2F;IP协议的计算机上都可用。 标准化：回环地址 127.0.0.1 是一个标准化的IPv4回环地址。IPv6的回环地址是 “::1”。 用途广泛：回环地址在本地开发、测试网络应用程序、诊断网络问题等方面被广泛使用。它也在系统中的某些本地服务中使用，以便这些服务可以在不涉及网络的情况下与其他应用程序通信。 总之，IP地址 127.0.0.1 是为了在计算机上进行本地测试和通信而设计的，它允许应用程序在不需要外部网络连接的情况下进行自我测试和开发。它在开发和调试网络应用程序时非常有用。","categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://ycx81.github.io/tags/%E7%BD%91%E7%BB%9C/"}]}],"categories":[{"name":"编程","slug":"编程","permalink":"http://ycx81.github.io/categories/%E7%BC%96%E7%A8%8B/"},{"name":"随笔","slug":"随笔","permalink":"http://ycx81.github.io/categories/%E9%9A%8F%E7%AC%94/"},{"name":"日记","slug":"日记","permalink":"http://ycx81.github.io/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://ycx81.github.io/tags/redis/"},{"name":"吃","slug":"吃","permalink":"http://ycx81.github.io/tags/%E5%90%83/"},{"name":"博客搭建","slug":"博客搭建","permalink":"http://ycx81.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"hexo","slug":"hexo","permalink":"http://ycx81.github.io/tags/hexo/"},{"name":"网络","slug":"网络","permalink":"http://ycx81.github.io/tags/%E7%BD%91%E7%BB%9C/"}]}