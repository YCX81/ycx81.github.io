<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023.07.25随笔</title>
    <url>/2023/07/25/2023-07-25%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p><img src="/../images/IMG_0095.jpeg" alt="IMG_0095"><br>0x00 前言</p>
<p>今天总算是把博客搭建好了，其中遇到一堆奇怪的问题和各种各样的bug。。。(图为7.21大雨前的三公山)</p>
<span id="more"></span>

<p>最近面试的项目还不知道从何下手，每次准备去做的时候又想开摆，真是折磨啊，我发现我到现在写日记还是在纯记流水账哈哈哈哈哈哈</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.07.26随笔</title>
    <url>/2023/07/26/2023-07-26%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p><img src="/../images/IMG_0155.jpeg" alt="IMG_0155"></p>
<p>0x00 前言</p>
<p>每天感觉浑身无力，做事没有干劲，犹如一具行尸走肉，这个榴莲披萨薄脆还挺好吃。</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>随笔</category>
        <category>日记</category>
      </categories>
      <tags>
        <tag>吃</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis简易手册</title>
    <url>/2023/08/23/Redis%E7%AE%80%E6%98%93%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>&#x2F;&#x2F;首页文章展示缩略图</p>
<p><img src="/../images/download.png" alt="download"></p>
<p>0x00 前言</p>
<p>近期在B站看到一个1小时教学Redis，全程没有废话，粗略过了一遍，并对其主要知识点进行总结。</p>
<p>【【GeekHour】一小时Redis教程-哔哩哔哩】 <a href="https://b23.tv/MzEWwWh">https://b23.tv/MzEWwWh</a></p>
<span id="more"></span>

<p>以下是一些常用的Redis命令，使用Markdown语法进行总结：</p>
<h3 id="连接与配置"><a href="#连接与配置" class="headerlink" title="连接与配置"></a>连接与配置</h3><ul>
<li>连接到Redis服务器：<code>redis-cli</code></li>
<li>显示Redis服务器信息：<code>INFO</code></li>
<li>查看配置文件的路径：<code>CONFIG GET dir</code></li>
<li>修改配置项：<code>CONFIG SET &lt;config-name&gt; &lt;value&gt;</code></li>
<li>查看Redis版本：<code>redis-server -v</code></li>
</ul>
<h3 id="键操作"><a href="#键操作" class="headerlink" title="键操作"></a>键操作</h3><ul>
<li>设置键值对：<code>SET &lt;key&gt; &lt;value&gt;</code></li>
<li>获取键对应的值：<code>GET &lt;key&gt;</code></li>
<li>删除键值对：<code>DEL &lt;key&gt;</code></li>
<li>检查键是否存在：<code>EXISTS &lt;key&gt;</code></li>
<li>设置键的过期时间（秒）：<code>EXPIRE &lt;key&gt; &lt;seconds&gt;</code></li>
<li>移除键的过期时间：<code>PERSIST &lt;key&gt;</code></li>
<li>查看键的剩余过期时间（秒）：<code>TTL &lt;key&gt;</code></li>
</ul>
<h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><ul>
<li>向列表头部添加元素：<code>LPUSH &lt;key&gt; &lt;value&gt;</code></li>
<li>向列表尾部添加元素：<code>RPUSH &lt;key&gt; &lt;value&gt;</code></li>
<li>获取列表长度：<code>LLEN &lt;key&gt;</code></li>
<li>获取列表指定范围的元素：<code>LRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt;</code></li>
<li>弹出并返回列表头部元素：<code>LPOP &lt;key&gt;</code></li>
<li>弹出并返回列表尾部元素：<code>RPOP &lt;key&gt;</code></li>
</ul>
<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><ul>
<li>向集合添加一个元素：<code>SADD &lt;key&gt; &lt;member&gt;</code></li>
<li>获取集合的所有成员：<code>SMEMBERS &lt;key&gt;</code></li>
<li>检查元素是否是集合的成员：<code>SISMEMBER &lt;key&gt; &lt;member&gt;</code></li>
<li>移除集合中的一个元素：<code>SREM &lt;key&gt; &lt;member&gt;</code></li>
<li>计算集合的交集、并集或差集：<code>SINTER</code>, <code>SUNION</code>, <code>SDIFF</code></li>
</ul>
<h3 id="哈希操作"><a href="#哈希操作" class="headerlink" title="哈希操作"></a>哈希操作</h3><ul>
<li>设置哈希字段值：<code>HSET &lt;key&gt; &lt;field&gt; &lt;value&gt;</code></li>
<li>获取哈希字段值：<code>HGET &lt;key&gt; &lt;field&gt;</code></li>
<li>获取哈希所有字段和值：<code>HGETALL &lt;key&gt;</code></li>
<li>删除哈希字段：<code>HDEL &lt;key&gt; &lt;field&gt;</code></li>
<li>查看哈希字段数量：<code>HLEN &lt;key&gt;</code></li>
</ul>
<h3 id="有序集合操作"><a href="#有序集合操作" class="headerlink" title="有序集合操作"></a>有序集合操作</h3><ul>
<li>向有序集合添加成员及分数：<code>ZADD &lt;key&gt; &lt;score&gt; &lt;member&gt;</code></li>
<li>获取有序集合的成员列表：<code>ZRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt;</code></li>
<li>根据分数范围获取有序集合的成员：<code>ZRANGEBYSCORE &lt;key&gt; &lt;min&gt; &lt;max&gt;</code></li>
<li>获取有序集合的成员数量：<code>ZCARD &lt;key&gt;</code></li>
<li>移除有序集合中的成员：<code>ZREM &lt;key&gt; &lt;member&gt;</code></li>
</ul>
<h3 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h3><ul>
<li>订阅频道：<code>SUBSCRIBE &lt;channel&gt;</code></li>
<li>取消订阅频道：<code>UNSUBSCRIBE &lt;channel&gt;</code></li>
<li>发布消息到频道：<code>PUBLISH &lt;channel&gt; &lt;message&gt;</code></li>
</ul>
<h3 id="排序和排名"><a href="#排序和排名" class="headerlink" title="排序和排名"></a>排序和排名</h3><ul>
<li>按分数升序排列有序集合的成员：<code>ZREVRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt;</code></li>
<li>获取有序集合中成员的排名：<code>ZRANK &lt;key&gt; &lt;member&gt;</code></li>
<li>获取有序集合中成员的分数：<code>ZSCORE &lt;key&gt; &lt;member&gt;</code></li>
</ul>
<h3 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h3><ul>
<li>使用通配符查找键名：<code>KEYS &lt;pattern&gt;</code></li>
<li>批量删除符合条件的键：<code>DEL &lt;pattern&gt;</code></li>
<li>列出匹配的键名：<code>SCAN &lt;cursor&gt; MATCH &lt;pattern&gt; COUNT &lt;count&gt;</code></li>
</ul>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul>
<li>开启事务：<code>MULTI</code></li>
<li>执行事务：<code>EXEC</code></li>
<li>取消事务：<code>DISCARD</code></li>
</ul>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul>
<li>使用管道执行多个命令：可以通过一次网络往返执行多个命令以提高性能，使用<code>PIPELINE</code></li>
</ul>
<h3 id="信息统计"><a href="#信息统计" class="headerlink" title="信息统计"></a>信息统计</h3><ul>
<li>查看内存使用情况：<code>MEMORY STATS</code></li>
<li>查看服务器状态：<code>INFO SERVER</code></li>
<li>查看客户端列表：<code>CLIENT LIST</code></li>
</ul>
<h3 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h3><ul>
<li>创建数据快照：<code>SAVE</code></li>
<li>在后台创建数据快照：<code>BGSAVE</code></li>
<li>恢复数据：将快照文件复制到Redis数据目录并重启服务器</li>
</ul>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><ul>
<li>设置访问密码：<code>CONFIG SET requirepass &lt;password&gt;</code></li>
<li>验证密码：<code>AUTH &lt;password&gt;</code></li>
</ul>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><ul>
<li>创建Redis集群：使用Redis Cluster</li>
<li>查看集群节点信息：<code>CLUSTER NODES</code></li>
<li>手动切换主节点：<code>CLUSTER FAILOVER</code></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>发送一个即时命令到服务器以查看性能统计信息：<code>INFO COMMANDSTATS</code></li>
<li>监视键的变化：<code>MONITOR</code></li>
<li>配置Redis服务器以接受远程连接：修改<code>redis.conf</code>文件中的<code>bind</code>选项</li>
</ul>
<h3 id="在C-中使用Redis"><a href="#在C-中使用Redis" class="headerlink" title="在C++中使用Redis"></a>在C++中使用Redis</h3><p>在C++中使用Redis通常需要使用Redis C++客户端库，其中最常用的是hiredis和cpp_redis。以下是在C++中使用Redis的基本步骤以及一些常见操作：</p>
<p><strong>步骤1：安装Redis C++客户端库</strong></p>
<p>首先安装Redis C++客户端库，最常见的选择是hiredis和cpp_redis。您可以使用包管理器（如apt、brew、vcpkg）来安装这些库，或者从官方GitHub存储库手动构建它们。</p>
<p><strong>步骤2：包含头文件</strong></p>
<p>在您的C++代码中，包含适当的Redis客户端库头文件。例如使用cpp_redis则需要包含以下头文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cpp_redis/cpp_redis&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>步骤3：建立与Redis的连接</strong></p>
<p>在代码中，使用客户端库提供的函数来建立与Redis服务器的连接。这通常涉及创建一个客户端对象并配置连接参数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cpp_redis::client client;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置连接参数</span></span><br><span class="line">client.<span class="built_in">connect</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br></pre></td></tr></table></figure>

<p><strong>步骤4：执行Redis命令</strong></p>
<p>使用客户端库提供的函数执行Redis命令。以下是一些常见的示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置键值对</span></span><br><span class="line">client.<span class="built_in">set</span>(<span class="string">&quot;my_key&quot;</span>, <span class="string">&quot;my_value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键的值</span></span><br><span class="line">client.<span class="built_in">get</span>(<span class="string">&quot;my_key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行哈希操作</span></span><br><span class="line">client.<span class="built_in">hset</span>(<span class="string">&quot;my_hash&quot;</span>, <span class="string">&quot;field1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">client.<span class="built_in">hget</span>(<span class="string">&quot;my_hash&quot;</span>, <span class="string">&quot;field1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>步骤5：提交命令和处理响应</strong></p>
<p>提交Redis命令并处理响应。可以使用回调函数或阻塞方式等不同的方法来处理响应：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交命令</span></span><br><span class="line">client.<span class="built_in">sync_commit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理响应（回调方式）</span></span><br><span class="line">client.<span class="built_in">get</span>(<span class="string">&quot;my_key&quot;</span>, [](cpp_redis::reply&amp; reply) &#123;</span><br><span class="line">    <span class="keyword">if</span> (reply.<span class="built_in">is_string</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; reply.<span class="built_in">as_string</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理响应（阻塞方式）</span></span><br><span class="line">cpp_redis::reply reply = client.<span class="built_in">sync_commit</span>();</span><br><span class="line"><span class="keyword">if</span> (reply.<span class="built_in">is_string</span>()) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; reply.<span class="built_in">as_string</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>步骤6：关闭连接</strong></p>
<p>在使用完Redis之后，确保关闭与Redis服务器的连接以释放资源：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">client.<span class="built_in">disconnect</span>();</span><br></pre></td></tr></table></figure>

<p>要了解更多详细信息和示例，请查阅Redis C++客户端库的文档。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/2023/01/23/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>0x00 前言</p>
<p>根据日常的hexo使用情况，总结一些hexo常用命令，方便及时查询。</p>
<span id="more"></span>

<p>Hexo 是一个流行的静态网站生成器，用于创建和维护博客和静态网站。以下是一些常用的 Hexo 命令：</p>
<ol>
<li><p>**hexo init &lt;folder&gt;**：</p>
<ul>
<li>初始化一个新的 Hexo 站点，将站点文件结构创建在指定的文件夹中。</li>
</ul>
</li>
<li><p>**hexo new &lt;title&gt;**：</p>
<ul>
<li>创建一篇新的博客文章，指定文章的标题。Hexo 会根据配置生成一个 Markdown 文件，供您编写内容。</li>
</ul>
</li>
<li><p><strong>hexo generate</strong> 或 <strong>hexo g</strong>：</p>
<ul>
<li>生成静态网站文件。这会将 Markdown 文件编译成 HTML 并生成静态页面。</li>
</ul>
</li>
<li><p><strong>hexo server</strong> 或 <strong>hexo s</strong>：</p>
<ul>
<li>启动一个本地服务器，用于在本地预览您的博客。默认情况下，访问地址为 <a href="http://localhost:4000/">http://localhost:4000</a> 。</li>
</ul>
</li>
<li><p><strong>hexo deploy</strong>：</p>
<ul>
<li>部署生成的静态网站到托管平台，如 GitHub Pages 或自定义的服务器。您需要配置部署信息。</li>
</ul>
</li>
<li><p><strong>hexo clean</strong>：</p>
<ul>
<li>清除 Hexo 生成的临时文件和缓存，通常在出现问题或需要重新生成时使用。</li>
</ul>
</li>
<li><p>**hexo new page &lt;name&gt;**：</p>
<ul>
<li>创建一个新的页面，可以是关于页面、联系页面等。类似于创建文章，但它们被存储在 source 目录的 <code>_pages</code> 子目录中。</li>
</ul>
</li>
<li><p><strong>hexo list</strong>：</p>
<ul>
<li>列出所有已创建的文章和页面。</li>
</ul>
</li>
<li><p>**hexo publish &lt;title&gt;**：</p>
<ul>
<li>发布一篇草稿。您可以指定文章标题，Hexo 会将草稿文件移动到 <code>_posts</code> 目录。</li>
</ul>
</li>
<li><p>**hexo draft &lt;title&gt;**：</p>
<ul>
<li>创建一篇草稿文章。Hexo 会在 <code>_drafts</code> 目录中创建一个 Markdown 文件，供以后编辑和发布。</li>
</ul>
</li>
<li><p>**hexo new draft &lt;title&gt;**：</p>
<ul>
<li>创建并同时发布一篇草稿文章。Hexo 会创建 Markdown 文件并将其移动到 <code>_posts</code> 目录。</li>
</ul>
</li>
<li><p><strong>hexo server -d</strong> 或 <strong>hexo s -d</strong>：</p>
<ul>
<li>启动本地服务器并监听文件变化，当文件变化时自动重新生成网站。</li>
</ul>
</li>
<li><p><strong>hexo generate –watch</strong> 或 <strong>hexo g –watch</strong>：</p>
<ul>
<li>生成静态网站并监听文件变化，当文件变化时自动重新生成网站。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么是127.0.0.1</title>
    <url>/2022/10/12/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF127-0-0-1/</url>
    <content><![CDATA[<p>0x00 前言</p>
<p>刚学习网络时，总看到书上配置的ip地址总是127.0.0.1，遂查找网络进行扫盲。</p>
<span id="more"></span>

<p>IP地址 127.0.0.1 是一个特殊的地址，通常被称为”本地主机”或”回环地址”（Loopback Address）。这个地址是为了在计算机上进行自我测试和本地通信而设计的，具有以下重要特点：</p>
<ol>
<li><p><strong>只在本地使用</strong>：IP地址 127.0.0.1 只能在同一台计算机内部使用，不能被用于跨计算机的网络通信。这是因为它被用于回送到计算机本身的网络数据。</p>
</li>
<li><p><strong>自我测试</strong>：开发人员可以在本地主机上测试网络应用程序，而无需连接到外部网络或依赖外部服务器。这有助于确保应用程序在没有网络连接的情况下也能正常工作。</p>
</li>
<li><p><strong>无需网络硬件</strong>：使用回环地址，您可以在没有网络连接的情况下测试应用程序，因为数据不会离开计算机。</p>
</li>
<li><p><strong>简单的配置</strong>：回环地址不需要任何特殊配置或硬件支持。它通常在任何支持TCP&#x2F;IP协议的计算机上都可用。</p>
</li>
<li><p><strong>标准化</strong>：回环地址 127.0.0.1 是一个标准化的IPv4回环地址。IPv6的回环地址是 “::1”。</p>
</li>
<li><p><strong>用途广泛</strong>：回环地址在本地开发、测试网络应用程序、诊断网络问题等方面被广泛使用。它也在系统中的某些本地服务中使用，以便这些服务可以在不涉及网络的情况下与其他应用程序通信。</p>
</li>
</ol>
<p>总之，IP地址 127.0.0.1 是为了在计算机上进行本地测试和通信而设计的，它允许应用程序在不需要外部网络连接的情况下进行自我测试和开发。它在开发和调试网络应用程序时非常有用。</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>简易网盘项目00</title>
    <url>/2023/07/27/%E7%AE%80%E6%98%93%E7%BD%91%E7%9B%98%E9%A1%B9%E7%9B%AE00/</url>
    <content><![CDATA[<p><img src="/../images/v2-770576ab3a108d44200a78910080cc5e_1440w.jpg" alt="v2-770576ab3a108d44200a78910080cc5e_1440w"></p>
<p>0x00 前言</p>
<p>此项目准备用于应付近期的面试，作为一种简易的Web Server项目，可能需要4-5期迭代开发。本项目将尽可能还原市面上主流的网盘所具有的功能。</p>
<span id="more"></span>

<h2 id="0x01-第一期开发总纲"><a href="#0x01-第一期开发总纲" class="headerlink" title="0x01 第一期开发总纲"></a>0x01 第一期开发总纲</h2><p>第一期主要需要实现的功能有服务器端实现命令解析，可能涉及的命令包括：</p>
<ol>
<li>cd							    进入服务器对应目录</li>
<li>ls				  			   列出当前路径下的所有文件</li>
<li>pwd					   	  显示当前所处路径</li>
<li>puts filename		     上传本地文件到服务器</li>
<li>get filename				下载服务器文件到本地</li>
<li>rm filename			   删除服务器上的某文件</li>
<li>mkdir dirname		   创建文件夹</li>
<li>非法命令            			不响应</li>
</ol>
<h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2>]]></content>
  </entry>
</search>
